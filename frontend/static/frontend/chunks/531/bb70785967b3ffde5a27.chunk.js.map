{"version":3,"file":"chunks/531/bb70785967b3ffde5a27.chunk.js","mappings":"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","sources":["webpack://sgp/./src/pages/planeamento/cortes/FormCortesUpsert.jsx","webpack://sgp/./src/pages/planeamento/ordemFabrico/FormCortes.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\r\nimport { createUseStyles } from 'react-jss';\r\nimport styled from 'styled-components';\r\nimport dayjs from 'dayjs';\r\nimport Joi from 'joi';\r\nimport { fetch, fetchPost } from \"utils/fetch\";\r\nimport { API_URL } from \"config\";\r\nimport { getSchema } from \"utils/schemaValidator\";\r\nimport { FormLayout, Field, FieldSet, FieldItem, AlertsContainer, Item, SelectField, CheckboxField, HorizontalRule, VerticalSpace } from \"components/formLayout\";\r\nimport AlertMessages from \"components/alertMessages\";\r\nimport IconButton from \"components/iconButton\";\r\nimport ResultMessage from 'components/resultMessage';\r\nimport Portal from \"components/portal\";\r\nimport { Input, Space, Form, Button, InputNumber } from \"antd\";\r\nimport { DATE_FORMAT, DATETIME_FORMAT } from 'config';\r\nimport { useDrag, useDrop, DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport { useImmer } from \"use-immer\";\r\n/* import SvgSchema from '../paletizacaoSchema/SvgSchema'; */\r\n\r\nconst schema = (keys, excludeKeys) => {\r\n    return getSchema({}, keys, excludeKeys).unknown(true);\r\n}\r\n\r\nconst useStyles = createUseStyles({\r\n    bobine: {\r\n        cursor: \"move\",\r\n        border: \"solid 1px #bfbfbf\",\r\n        height: \"150px\",\r\n        boxShadow: \"2px 1px 2px #f0f0f0\",\r\n        margin: \"3px\",\r\n        borderRadius: \"3px\",\r\n        width: (props) => `${props.width}%`,\r\n        '&:hover': {\r\n            backgroundColor: \"#e6f7ff\"\r\n        }\r\n    }\r\n})\r\n\r\nconst Bobine = ({ id, value, index, moveBobine, width = 0, forInput = false, cortes }) => {\r\n    const classes = useStyles({ width });\r\n    const ref = useRef(null);\r\n    const color = cortes.find(v => v.item_lar == value);\r\n    const style = {\r\n        color: color.color,\r\n        fontStyle: \"italic\",\r\n        height: \"70%\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    };\r\n    const [{ handlerId }, drop] = useDrop({\r\n        accept: 'bobine',\r\n        collect(monitor) {\r\n            return {\r\n                handlerId: monitor.getHandlerId(),\r\n            };\r\n        },\r\n        drop(item, monitor) {\r\n            if (!ref.current) {\r\n                return;\r\n            }\r\n            const dragIndex = item.index;\r\n            const hoverIndex = index;\r\n            if (dragIndex === hoverIndex) {\r\n                return;\r\n            }\r\n            const hoverBoundingRect = ref.current?.getBoundingClientRect();\r\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n            const clientOffset = monitor.getClientOffset();\r\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n            moveBobine(dragIndex, hoverIndex);\r\n            item.index = hoverIndex;\r\n        }\r\n    });\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        type: 'bobine',\r\n\r\n        item: () => {\r\n            return { id, index };\r\n        },\r\n        canDrag(monitor) {\r\n            return forInput;\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    });\r\n    const opacity = isDragging ? 0 : 1;\r\n    drag(ref);\r\n    drop(ref);\r\n    return (\r\n        <div ref={ref} className={classes.bobine} style={{ opacity, background: color.bcolor, color: color.color }} data-handler-id={handlerId}>\r\n            <div style={{ fontSize: \"10px\", textAlign: \"center\" }}>{index + 1}</div>\r\n            <div style={style}>{value}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ({ record, setFormTitle, parentRef, closeParent, parentReload, wrapForm = \"form\", forInput = true }) => {\r\n    const [form] = Form.useForm();\r\n    const [loading, setLoading] = useState(true);\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const [formStatus, setFormStatus] = useState({ error: [], warning: [], info: [], success: [] });\r\n    const [guides, setGuides] = useState(false);\r\n    const [bobines, setBobines] = useImmer([]);\r\n    const [larguraTotal, setLarguraTotal] = useState(0);\r\n\r\n\r\n    const init = () => {\r\n        const { cortes, cortesOrdem } = record;\r\n        (setFormTitle) && setFormTitle({ title: `Posicionar Cortes` });\r\n        const { largura_json } = cortes[0];\r\n        const _bobines = [];\r\n        let _larguraTotal = 0;\r\n        if (!cortesOrdem) {\r\n            for (const [key, value] of Object.entries(JSON.parse(largura_json))) {\r\n                _bobines.push(...(new Array(value)).fill(key));\r\n                _larguraTotal = _larguraTotal + value * key;\r\n            }\r\n        } else {\r\n            const _cortesOrdem = JSON.parse(cortesOrdem.largura_ordem);\r\n            _bobines.push(..._cortesOrdem);\r\n            form.setFieldsValue({ designacao: cortesOrdem.designacao });\r\n            _larguraTotal = _cortesOrdem.reduce((sum, v) => Number(sum) + Number(v));\r\n        }\r\n        setBobines(_bobines);\r\n        setLarguraTotal(_larguraTotal);\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [record]);\r\n\r\n    const onFinish = async (values) => {\r\n        const status = { error: [], warning: [], info: [], success: [] };\r\n        const { cortes, ordem } = record;\r\n        const { cortes_id } = cortes[0];\r\n        let touched = false;\r\n        if (!ordem) {\r\n            touched = true;\r\n        } else {\r\n            if (!JSON.parse(ordem.largura_ordem).every((v, i) => v === bobines[i])) {\r\n                touched = true;\r\n            }\r\n        }\r\n        if (touched) {\r\n            const response = await fetchPost({ url: `${API_URL}/updatecortesordem/`, parameters: { ...values, largura_ordem: JSON.stringify(bobines), cortes_id } });\r\n            if (response.data.status !== \"error\") {\r\n                status.success.push({ message: response.data.title });\r\n                parentReload({}, \"lookup\");\r\n                closeParent();\r\n            } else {\r\n                status.error.push({ message: response.data.title });\r\n            }\r\n            setFormStatus(status);\r\n        }\r\n    }\r\n\r\n    const moveBobine = useCallback((dragIndex, hoverIndex) => {\r\n        setBobines(draft => {\r\n            const tmp = draft[hoverIndex];\r\n            draft[hoverIndex] = draft[dragIndex];\r\n            draft[dragIndex] = tmp;\r\n        });\r\n    }, [bobines]);\r\n\r\n    \r\n    const onSubmit = useCallback(() =>{\r\n        setSubmitting(true);\r\n        form.submit();\r\n    },[]);\r\n\r\n    return (\r\n        <>\r\n            <AlertMessages formStatus={formStatus} />\r\n            <Form form={form} name={`fps`} onFinish={onFinish} component={wrapForm}>\r\n                <FormLayout\r\n                    id=\"LAY-CORTESORDEM-UPSERT\"\r\n                    guides={guides}\r\n                    layout=\"vertical\"\r\n                    style={{ width: \"100%\", padding: \"0px\"/* , minWidth: \"700px\" */ }}\r\n                    schema={schema}\r\n                    field={{\r\n                        forInput,\r\n                        wide: [16],\r\n                        margin: \"2px\", overflow: false, guides: guides,\r\n                        label: { enabled: true, pos: \"top\", align: \"start\", vAlign: \"center\", /* width: \"80px\", */ wrap: false, overflow: false, colon: true, ellipsis: true },\r\n                        alert: { pos: \"right\", tooltip: true, container: false /* container: \"el-external\" */ },\r\n                        layout: { top: \"\", right: \"\", center: \"\", bottom: \"\", left: \"\" },\r\n                        required: true,\r\n                        style: { alignSelf: \"top\" }\r\n                    }}\r\n                    fieldSet={{\r\n                        guides: guides,\r\n                        wide: 16, margin: \"2px\", layout: \"horizontal\", overflow: false\r\n                    }}\r\n                >\r\n                    {forInput && <>\r\n                        <FieldSet margin={false} field={{ wide: [6, 4] }}>\r\n                            <Field name=\"designacao\" label={{ enabled: false }}><Input placeholder=\"Designação\" size=\"small\" /></Field>\r\n                        </FieldSet>\r\n                        <VerticalSpace height=\"24px\" />\r\n                    </>\r\n                    }\r\n                </FormLayout>\r\n            </Form>\r\n\r\n            <DndProvider backend={HTML5Backend}>\r\n                <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                    {bobines.map((v, i) => {\r\n                        return (<Bobine key={`b-${v}.${i}`} id={`b-${v}.${i}`} value={v} index={i} moveBobine={moveBobine} width={(v * 100) / larguraTotal} cortes={record.cortes} forInput={forInput} />);\r\n                    })}\r\n                </div>\r\n            </DndProvider>\r\n            {parentRef && <Portal elId={parentRef.current}>\r\n                <Space>\r\n                    <Button disabled={submitting} onClick={onSubmit} type=\"primary\">Guardar</Button>\r\n                    {/* <Button onClick={() => setGuides(!guides)}>{guides ? \"No Guides\" : \"Guides\"}</Button> */}\r\n                </Space>\r\n            </Portal>\r\n            }\r\n        </>\r\n    );\r\n}","import React, { useEffect, useState, useCallback, useRef, useContext } from 'react';\r\nimport { createUseStyles } from 'react-jss';\r\nimport styled from 'styled-components';\r\nimport dayjs from 'dayjs';\r\nimport Joi from 'joi';\r\nimport { fetch, fetchPost, cancelToken } from \"utils/fetch\";\r\nimport { API_URL } from \"config\";\r\nimport { WrapperForm, TitleForm, FormLayout, Field, FieldSet, Label, LabelField, FieldItem, AlertsContainer, Item, SelectField, InputAddon, VerticalSpace } from \"components/formLayout\";\r\nimport AlertMessages from \"components/alertMessages\";\r\nimport Toolbar from \"components/toolbar\";\r\nimport { Button, Spin, Input, Form, InputNumber, Skeleton } from \"antd\";\r\nimport { LoadingOutlined, EditOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { DATE_FORMAT, DATETIME_FORMAT } from 'config';\r\nimport FormCortesUpsert from '../cortes/FormCortesUpsert';\r\nimport { useImmer } from \"use-immer\";\r\nimport { OFabricoContext } from './FormOFabricoValidar';\r\n\r\n\r\nconst colors = [\r\n    { bcolor: '#002766', color: '#ffffff' },\r\n    { bcolor: '#0050b3', color: '#ffffff' }, { bcolor: '#1890ff', color: '#000000' },\r\n    { bcolor: '#69c0ff', color: '#000000' }, { bcolor: '#bae7ff', color: '#000000' },\r\n    { bcolor: '#ffffff', color: '#000000' }\r\n];\r\n\r\n\r\nconst Drawer = ({ showWrapper, setShowWrapper, parentReload }) => {\r\n    const [formTitle, setFormTitle] = useState({});\r\n    const iref = useRef();\r\n    const { record = {} } = showWrapper;\r\n    const onVisible = () => {\r\n        setShowWrapper(prev => ({ ...prev, show: !prev.show }));\r\n    }\r\n    return (\r\n        <WrapperForm\r\n            title={<TitleForm title={formTitle.title} subTitle={formTitle.subTitle} />}\r\n            type=\"drawer\"\r\n            destroyOnClose={true}\r\n            mask={true}\r\n            setVisible={onVisible}\r\n            visible={showWrapper.show}\r\n            width={800}\r\n            bodyStyle={{ height: \"450px\" }}\r\n            footer={<div ref={iref} id=\"form-wrapper\" style={{ textAlign: 'right' }}></div>}\r\n        >\r\n            <FormCortesUpsert setFormTitle={setFormTitle} record={record} parentRef={iref} closeParent={onVisible} parentReload={parentReload} />\r\n        </WrapperForm>\r\n    );\r\n}\r\n\r\n\r\nconst loadArtigosAggLookup = async ({ agg_id, token }) => {\r\n    const { data: { rows } } = await fetchPost({ url: `${API_URL}/artigostempagglookup/`, filter: { agg_id }, sort: [], cancelToken: token });\r\n    return rows;\r\n}\r\n\r\nconst loadCortesOrdemLookup = async ({ cortes_id, token }) => {\r\n    const { data: { rows } } = await fetchPost({ url: `${API_URL}/cortesordemlookup/`, filter: { cortes_id }, sort: [], cancelToken: token });\r\n    return rows;\r\n}\r\n\r\n\r\nexport default ({ /* form, guides, schema,  */changedValues }) => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [showForm, setShowForm] = useState({ show: false });\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const [formStatus, setFormStatus] = useState({ error: [], warning: [], info: [], success: [] });\r\n    const [cortesOrdemLookup, setCortesOrdemLookup] = useState([]);\r\n    const [larguraUtil, setLarguraUtil] = useState();\r\n    const { form, guides, schema, ...ctx } = useContext(OFabricoContext);\r\n\r\n    useEffect(() => {\r\n        const cancelFetch = cancelToken();\r\n        loadData({ agg_id: ctx.agg_id, token: cancelFetch });\r\n        return (() => cancelFetch.cancel(\"Form Cortes Cancelled\"));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (changedValues) {\r\n            if (\"cortes\" in changedValues) {\r\n                setLarguraUtil(calculateLarguraUtil(form.getFieldValue(\"cortes\")));\r\n            }\r\n            if (\"cortesordem_id\" in changedValues) {\r\n                //const v = ((changedValues.cortesordem_id) ? cortesOrdemLookup.filter(v => v.id === changedValues.cortesordem_id) : [])[0];\r\n                //console.log(v);\r\n                //setCortesOrdem(v);\r\n            }\r\n        }\r\n    }, [changedValues]);\r\n\r\n\r\n    const cortesOrdem = () => {\r\n        const id = form.getFieldValue(\"cortesordem_id\");\r\n        return ((id) ? cortesOrdemLookup.filter(v => v.id === id) : [])[0];\r\n    };\r\n\r\n    const isCortesTouched = () => {\r\n        return !(!form.getFieldValue(\"cortes_id\") || (changedValues && \"cortes\" in changedValues));\r\n    }\r\n\r\n    const calculateLarguraUtil = useCallback((cortes) => {\r\n        const v = cortes.reduce((accumulator, current) => accumulator + (current.item_ncortes * current.item_lar), 0);\r\n        return v;\r\n    });\r\n\r\n    const loadData = ({ agg_id, token }, type = \"init\") => {\r\n        switch (type) {\r\n            case \"lookup\":\r\n                (async () => {\r\n                    const _cortesOrdemLookup = await loadCortesOrdemLookup({ cortes_id: form.getFieldValue(\"cortes_id\"), token });\r\n                    setCortesOrdemLookup(_cortesOrdemLookup);\r\n                })();\r\n                break;\r\n            default:\r\n                if (!loading) {\r\n                    setLoading(true);\r\n                }\r\n                (async () => {\r\n                    const _cortes = await loadArtigosAggLookup({ agg_id, token });\r\n                    if (_cortes.length > 0) {\r\n                        for (let [i, v] of _cortes.entries()) {\r\n                            const _larguras = JSON.parse(v.largura_json);\r\n                            if (_larguras !== undefined && _larguras !== null) {\r\n                                v[\"item_ncortes\"] = _larguras[v.item_lar];\r\n                                v[\"bcolor\"] = colors[i].bcolor;\r\n                                v[\"color\"] = colors[i].color;\r\n                            }\r\n                        }\r\n                    }\r\n                    const cortes_id = (_cortes.length > 0) ? _cortes[0][\"cortes_id\"] : null;\r\n                    const cortesordem_id = (_cortes.length > 0) ? _cortes[0][\"cortesordem_id\"] : null;\r\n                    const _cortesOrdemLookup = await loadCortesOrdemLookup({ cortes_id, token });\r\n                    form.setFieldsValue({ cortes: _cortes, ...(cortes_id ? { cortes_id } : { cortes_id: null }), ...(cortesordem_id ? { cortesordem_id } : { cortesordem_id: null }) });\r\n                    setLarguraUtil(calculateLarguraUtil(_cortes));\r\n                    setCortesOrdemLookup(_cortesOrdemLookup);\r\n                    setLoading(false);\r\n                })();\r\n        }\r\n    }\r\n\r\n    const onSubmit = useCallback(async () => {\r\n        const status = { error: [], warning: [], info: [], success: [] };\r\n        const response = await fetchPost({ url: `${API_URL}/newcortes/`, parameters: { ...form.getFieldsValue([\"cortes\"]), agg_id: ctx.agg_id } });\r\n        if (response.data.status == \"error\") {\r\n            status.error.push({ message: response.data.title });\r\n        } else {\r\n            status.success.push({ message: response.data.title });\r\n            loadData({ agg_id: ctx.agg_id });\r\n        }\r\n        setFormStatus(status);\r\n    }, []);\r\n\r\n    const clearCortes = async () => {\r\n        const status = { error: [], warning: [], info: [], success: [] };\r\n        const response = await fetchPost({ url: `${API_URL}/clearcortes/`, parameters: { agg_id: ctx.agg_id } });\r\n        if (response.data.status == \"error\") {\r\n            status.error.push({ message: response.data.title });\r\n        } else {\r\n            status.success.push({ message: response.data.title });\r\n            loadData({ agg_id: ctx.agg_id });\r\n        }\r\n        setFormStatus(status);\r\n    }\r\n\r\n\r\n\r\n    const onShowForm = (newForm = false) => {\r\n        if (newForm) {\r\n            setShowForm(prev => ({ ...prev, show: !prev.show, record: { ...form.getFieldsValue([\"cortes\", \"cortes_id\"]) } }));\r\n        } else {\r\n            setShowForm(prev => ({ ...prev, show: !prev.show, record: { ...form.getFieldsValue([\"cortes\", \"cortes_id\"]), cortesOrdem: cortesOrdem() } }));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AlertMessages formStatus={formStatus} />\r\n            <Spin spinning={loading} indicator={<LoadingOutlined style={{ fontSize: 24 }} spin />} tip=\"A carregar...\">\r\n                <Drawer showWrapper={showForm} setShowWrapper={setShowForm} parentReload={loadData} />\r\n                <FormLayout\r\n                    id=\"LAY-CORTES\"\r\n                    guides={guides}\r\n                    layout=\"vertical\"\r\n                    style={{ width: \"100%\", padding: \"0px\"/* , minWidth: \"700px\" */ }}\r\n                    schema={schema}\r\n                    field={{\r\n                        //wide: [3, 2, 1, '*'],\r\n                        margin: \"2px\", overflow: false, guides: guides,\r\n                        label: { enabled: true, pos: \"top\", align: \"start\", vAlign: \"center\", /* width: \"80px\", */ wrap: false, overflow: false, colon: true, ellipsis: true },\r\n                        alert: { pos: \"right\", tooltip: true, container: true /* container: \"el-external\" */ },\r\n                        layout: { top: \"\", right: \"\", center: \"\", bottom: \"\", left: \"\" },\r\n                        addons: {}, //top|right|center|bottom|left\r\n                        required: true,\r\n                        style: { alignSelf: \"center\" }\r\n                    }}\r\n                    fieldSet={{\r\n                        guides: guides,\r\n                        wide: 16, margin: false, layout: \"horizontal\", overflow: false\r\n                    }}\r\n                >\r\n\r\n                    <FieldSet>\r\n                        {form.getFieldValue(\"cortes_id\") && <Toolbar\r\n                            style={{ width: \"100%\" }}\r\n                            left={<div>{larguraUtil && <>Largura Útil [ <b>{larguraUtil}mm</b> ]</>}</div>}\r\n                            right={<Button onClick={clearCortes}>Refazer Cortes</Button>}\r\n                        />\r\n                        }\r\n                    </FieldSet>\r\n                    <FieldSet>\r\n\r\n\r\n                        <FieldSet layout=\"vertical\" style={{ minWidth: \"200px\", maxWidth: \"200px\" }}>\r\n                            <FieldSet style={{ fontWeight: 500 }} field={{ wide: [8, 8], noItemWrap: true, label: { enabled: false } }}>\r\n                                <Field>Largura</Field>\r\n                                <Field>Nº Cortes</Field>\r\n                            </FieldSet>\r\n\r\n\r\n                            <Form.List name=\"cortes\">\r\n\r\n                                {(fields, { add, remove, move }) => {\r\n                                    return (\r\n                                        <>\r\n                                            {fields.map((field, index) => (\r\n                                                <FieldSet key={field.key} field={{ wide: [8, 8] }}>\r\n                                                    <Field forInput={false} name={[field.name, `item_lar`]} label={{ enabled: false }}><Input disabled={true} size=\"small\" /></Field>\r\n                                                    <Field name={[field.name, `item_ncortes`]} label={{ enabled: false }}><InputNumber size=\"small\" min={1} max={24} /></Field>\r\n                                                </FieldSet>\r\n                                            ))}\r\n                                        </>\r\n\r\n                                    )\r\n                                }}\r\n\r\n                            </Form.List>\r\n                            <VerticalSpace height=\"12px\" />\r\n                            <FieldSet><Button disabled={isCortesTouched()} type=\"dashed\" onClick={onSubmit} style={{ width: \"100%\" }}>Aplicar</Button></FieldSet>\r\n\r\n                        </FieldSet>\r\n                    </FieldSet>\r\n                    <VerticalSpace height=\"12px\" />\r\n                    <FieldSet>\r\n                        {form.getFieldValue(\"cortes_id\") && <Toolbar\r\n                            style={{ width: \"100%\" }}\r\n                            left={\r\n                                <FieldSet>\r\n                                    <Field name=\"cortesordem_id\" layout={{ center: \"align-self:center;\", right: \"align-self:center;\" }} label={{ enabled: true, text: \"Posição Cortes\", pos: \"left\" }} addons={{\r\n                                        ...(form.getFieldValue(\"cortesordem_id\") && { right: <Button onClick={() => onShowForm()} style={{ marginLeft: \"3px\" }} size=\"small\"><EditOutlined style={{ fontSize: \"16px\" }} /></Button> })\r\n                                    }}>\r\n                                        <SelectField allowClear size=\"small\" data={cortesOrdemLookup} keyField=\"id\" textField=\"designacao\"\r\n                                            optionsRender={(d, keyField, textField) => ({ label: <div><div style={{ display: \"flex\" }}><div style={{ minWidth: \"150px\" }}><b>{d[textField]}</b></div><div>v.{d[\"versao\"]}</div></div><div style={{ color: \"#1890ff\" }}>{d[\"largura_ordem\"].replaceAll('\"', ' ')}</div></div>, value: d[keyField] })}\r\n                                        />\r\n                                    </Field>\r\n                                </FieldSet>\r\n                            }\r\n                            right={<Button onClick={() => onShowForm(true)}>Novo Posicionamento de Cortes</Button>}\r\n                        />\r\n                        }\r\n                    </FieldSet>\r\n                    <FieldSet field={{ wide: [16] }}>\r\n                        <FieldItem label={{ enabled: false }}>\r\n                            {((loading, cortesOrdem) => {\r\n                                if (!loading && cortesOrdem) {\r\n                                    return (<FormCortesUpsert record={{ ...form.getFieldsValue([\"cortes\", \"cortes_id\"]), cortesOrdem }} wrapForm={false} forInput={false} parentReload={loadData} />);\r\n                                }\r\n                            })(loading, cortesOrdem())}\r\n                        </FieldItem>\r\n                    </FieldSet>\r\n                </FormLayout>\r\n            </Spin>\r\n        </>\r\n    );\r\n}"],"names":["schema","keys","excludeKeys","getSchema","unknown","useStyles","createUseStyles","bobine","cursor","border","height","boxShadow","margin","borderRadius","width","props","backgroundColor","Bobine","id","value","index","moveBobine","forInput","cortes","classes","ref","useRef","color","find","v","item_lar","style","fontStyle","display","justifyContent","alignItems","useDrop","accept","collect","monitor","handlerId","getHandlerId","drop","item","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","bottom","top","getClientOffset","y","useDrag","type","canDrag","isDragging","opacity","drag","className","background","bcolor","fontSize","textAlign","record","setFormTitle","parentRef","closeParent","parentReload","wrapForm","form","Form","useState","submitting","setSubmitting","error","warning","info","success","formStatus","setFormStatus","guides","useImmer","bobines","setBobines","larguraTotal","setLarguraTotal","useEffect","cortesOrdem","title","largura_json","_bobines","_larguraTotal","_cortesOrdem","JSON","parse","largura_ordem","push","setFieldsValue","designacao","reduce","sum","Number","Object","entries","key","Array","fill","init","onFinish","values","status","ordem","cortes_id","touched","every","i","fetchPost","url","API_URL","parameters","stringify","response","data","message","useCallback","draft","tmp","onSubmit","submit","name","component","layout","padding","field","wide","overflow","label","enabled","pos","align","vAlign","wrap","colon","ellipsis","alert","tooltip","container","right","center","left","required","alignSelf","fieldSet","placeholder","size","DndProvider","backend","HTML5Backend","flexDirection","map","elId","disabled","onClick","colors","Drawer","showWrapper","setShowWrapper","formTitle","iref","onVisible","prev","show","subTitle","destroyOnClose","mask","setVisible","visible","bodyStyle","footer","FormCortesUpsert","loadArtigosAggLookup","agg_id","token","filter","sort","cancelToken","rows","loadCortesOrdemLookup","changedValues","loading","setLoading","showForm","setShowForm","cortesOrdemLookup","setCortesOrdemLookup","larguraUtil","setLarguraUtil","useContext","OFabricoContext","ctx","cancelFetch","loadData","cancel","calculateLarguraUtil","getFieldValue","accumulator","item_ncortes","_cortesOrdemLookup","_cortes","length","_larguras","cortesordem_id","getFieldsValue","clearCortes","onShowForm","newForm","spinning","indicator","LoadingOutlined","spin","tip","addons","minWidth","maxWidth","fontWeight","noItemWrap","fields","add","remove","move","min","max","text","marginLeft","EditOutlined","allowClear","keyField","textField","optionsRender","d","replaceAll"],"sourceRoot":""}