{"version":3,"file":"chunks/69/91fc9aa3e623786d47d4.chunk.js","mappings":"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","sources":["webpack://sgp/./src/pages/currentline/FormLotes.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef, useMemo, useContext } from 'react';\r\nimport { createUseStyles } from 'react-jss';\r\nimport styled, { css } from 'styled-components';\r\nimport Joi from 'joi';\r\nimport { fetch, fetchPost, cancelToken } from \"utils/fetch\";\r\nimport { API_URL } from \"config\";\r\nimport { getSchema } from \"utils/schemaValidator\";\r\nimport { groupBy } from \"utils\";\r\nimport { FormLayout, Field, FieldSet, FieldItem, AlertsContainer, Item, SelectField, CheckboxField, HorizontalRule, VerticalSpace, InputAddon, SelectDebounceField, AutoCompleteField } from \"components/formLayout\";\r\nimport AlertMessages from \"components/alertMessages\";\r\nimport ResultMessage from 'components/resultMessage';\r\nimport YScroll from \"components/YScroll\";\r\nimport Portal from \"components/portal\";\r\nimport { Input, Space, Form, Button, InputNumber, DatePicker, Select, Spin, Switch, Tag } from \"antd\";\r\nimport { DATE_FORMAT, DATETIME_FORMAT, FORMULACAO_MANGUEIRAS, SOCKET } from 'config';\r\nimport useWebSocket from 'react-use-websocket';\r\n\r\nconst schema = (keys, excludeKeys) => {\r\n    return getSchema({}, keys, excludeKeys).unknown(true);\r\n}\r\n\r\nconst setId = (id) => {\r\n    if (id) {\r\n        return { key: \"update\", values: { id } };\r\n    }\r\n    return { key: \"insert\", values: {} };\r\n}\r\n\r\nconst loadMateriasPrimasLookup = async ({ token }) => {\r\n    const { data: { rows } } = await fetchPost({ url: `${API_URL}/materiasprimaslookup/`, filter: {}, sort: [], cancelToken: token });\r\n    return rows;\r\n}\r\n\r\nconst loadLotesLookup = async (lote_cod, item_cod) => {\r\n    const { data: { rows } } = await fetchPost({ url: `${API_URL}/loteslookup/`, pagination: { limit: 10 }, filter: { item_cod, loc_cod: 'BUFFER', lote_cod: `%${lote_cod}%` } });\r\n    return rows;\r\n}\r\n\r\nconst TitleExtrusora = ({ value, extrusoraRef }) => {\r\n    const show = useRef(false);\r\n    useEffect(() => {\r\n        if (extrusoraRef.current !== value) {\r\n            show.current = true;\r\n            console.log(\"extrusora\", value, extrusoraRef.current)\r\n            extrusoraRef.current = value;\r\n        } else {\r\n            show.current = false;\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {show.current &&\r\n                <FieldSet wide={16} layout=\"horizontal\" margin={false} field={{ wide: [8, 1.5, 1.5, 5], label: { enabled: false } }}>\r\n                    <FieldItem><div style={{ fontWeight: 700, fontSize: \"12px\" }}>Extrusora {value}</div></FieldItem>\r\n                    <FieldItem><div style={{ textAlign: \"right\" }}>Qtd. Requerida</div></FieldItem>\r\n                    <FieldItem><div style={{ textAlign: \"right\" }}>Qtd. Disponível</div></FieldItem>\r\n                    <FieldItem><div style={{ textAlign: \"center\" }}>Lotes</div></FieldItem>\r\n                </FieldSet>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst useFocus = () => {\r\n    const htmlElRef = useRef(null)\r\n    const setFocus = () => { htmlElRef.current && htmlElRef.current.focus() }\r\n    return [htmlElRef, setFocus]\r\n}\r\n\r\nconst StyledButtonMenu = styled(Button).withConfig({\r\n    shouldForwardProp: (prop) => !['first'].includes(prop)\r\n})`\r\n    border-radius:0px !important;\r\n    ${({ first = false }) => !first && css`border-left: 0px !important;`}\r\n`;\r\n\r\nconst MenuExtrusoras = ({ setExtrusora, extrusora, setFocus }) => {\r\n    const onSelect = (v) => {\r\n        if (extrusora === 'BC' && v === 'BC') {\r\n            setExtrusora('C');\r\n        } else if (extrusora === 'BC' && v === 'C') {\r\n            setExtrusora('B');\r\n        } else {\r\n            setExtrusora(v);\r\n        }\r\n        setFocus();\r\n    }\r\n    const type = (v) => {\r\n        if (v.includes(extrusora)) {\r\n            return 'primary';\r\n        }\r\n        return 'default';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <StyledButtonMenu size='large' onClick={() => onSelect('A')} first={true} type={type(['A'])}>Extrusora A</StyledButtonMenu>\r\n            <StyledButtonMenu size='large' onClick={() => onSelect('BC')} type={type(['B', 'BC'])}>Extrusora B</StyledButtonMenu>\r\n            <StyledButtonMenu size='large' onClick={() => onSelect('C')} type={type(['C', 'BC'])}>Extrusora C</StyledButtonMenu>\r\n        </>\r\n    );\r\n}\r\n\r\nconst Extrusora = ({ extrusoraRef, form, id, matPrimasLookup }) => {\r\n    const name = `lotes${id}`;\r\n    return (\r\n        <Form.List name={name}>\r\n            {(fields, { add, remove, move }) => {\r\n                return (\r\n                    <>\r\n                        {fields.map((field, index) => (\r\n                            <React.Fragment key={field.key}>\r\n                                <TitleExtrusora extrusoraRef={extrusoraRef} value={form.getFieldValue(name)[field.name]['extrusora']} />\r\n                                {/* <FieldSet wide={8} layout=\"horizontal\" margin={false} field={{ label: { enabled: false } }} style={{ ...(index % 2 == 0 && { backgroundColor: \"#f5f5f5\" }) }}> */}\r\n                                <FieldSet wide={16} margin={false}\r\n                                    /* style={{ ...(index % 2 == 0 && { backgroundColor: \"#f5f5f5\" }) }} */\r\n                                    field={{\r\n                                        label: { enabled: false },\r\n                                        style: { alignSelf: \"center\" },\r\n                                        wide: [1, 7, 1.5, 1.5, 5],\r\n                                        /* style: { border: \"solid 1px #fff\", borderLeft: \"none\", fontWeight: \"10px\" } */\r\n                                    }}\r\n                                >\r\n                                    <Field name={[field.name, `mangueira`]} style={{ fontSize: \"12px\", backgroundColor: \"#fff\", alignSelf: \"center\" }}>\r\n                                        <SelectField tabIndex={1000} size=\"large\" data={FORMULACAO_MANGUEIRAS[form.getFieldValue(name)[field.name]['extrusora']]} keyField=\"key\" textField=\"key\"\r\n                                            optionsRender={(d, keyField, textField) => ({ label: `${d[textField]}`, value: d[keyField] })}\r\n                                        />\r\n                                    </Field>\r\n                                    <Field name={[field.name, `matprima_cod`]} forInput={false} style={{ fontWeight: 700, fontSize: \"12px\", alignSelf: \"center\" }}>\r\n                                        <SelectField size=\"large\" data={matPrimasLookup} keyField=\"ITMREF_0\" textField=\"ITMDES1_0\"\r\n                                            optionsRender={(d, keyField, textField) => ({ label: `${d[textField]}`, value: d[keyField] })}\r\n                                            showSearch\r\n                                            filterOption={(input, option) => option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                                        />\r\n                                    </Field>\r\n                                    <FieldItem style={{ textAlign: \"right\", alignSelf: \"center\", fontSize: \"12px\" }}>\r\n                                        <b>{form.getFieldValue(name)[field.name].qty}</b> kg\r\n                                    </FieldItem>\r\n\r\n                                    <FieldItem style={{\r\n                                        textAlign: \"right\", alignSelf: \"center\", fontSize: \"12px\",\r\n                                        ...form.getFieldValue(name)[field.name].qty <= form.getFieldValue(name)[field.name].qty_available && { color: \"#237804\" }\r\n                                    }}>\r\n                                        <b>{form.getFieldValue(name)[field.name].qty_available}</b> kg\r\n                                    </FieldItem>\r\n                                    <FieldItem style={{ alignSelf: \"center\", fontSize: \"12px\" }}>\r\n                                        <Space size={2} wrap={true}>\r\n                                            {form.getFieldValue(name)[field.name]?.lotes && form.getFieldValue(name)[field.name]?.lotes.map((v, idx) => {\r\n                                                return (<Tag style={{ fontSize: \"11px\", padding: \"2px\" }} closable key={`lot-${idx}`} color=\"orange\">{v.lote} <b>{v.qty}</b> {v.unit.toLowerCase()}</Tag>);\r\n                                            })}\r\n                                        </Space>\r\n                                    </FieldItem>\r\n                                    {/* <Field name={[field.name, `lote_cod`]} required={false} layout={{ center: \"align-self:center;\", right: \"align-self:center;\" }} label={{ enabled: false }}>\r\n                                                                                                                    <SelectDebounceField\r\n                                                            autoFocus={field.name == 0 ? true : false}\r\n                                                            tabIndex={0}\r\n                                                            defaultActiveFirstOption\r\n                                                            placeholder=\"Lote\"\r\n                                                            size=\"small\"\r\n                                                            keyField=\"LOT_0\"\r\n                                                            textField=\"LOT_0\"\r\n                                                            showSearch\r\n                                                            showArrow\r\n                                                            allowClear\r\n                                                            fetchOptions={(v) => loadLotesLookup(v, form.getFieldValue(\"formulacao\")[field.name]['matprima_cod'])}\r\n                                                        /> \r\n                                                            <AutoCompleteField\r\n                                                                //autoFocus={field.name == 0 ? true : false}\r\n                                                                tabIndex={0}\r\n                                                                placeholder=\"Selecione o Lote\"\r\n                                                                size=\"small\"\r\n                                                                keyField=\"LOT_0\"\r\n                                                                textField=\"LOT_0\"\r\n                                                                dropdownMatchSelectWidth={250}\r\n                                                                allowClear\r\n                                                                backfill\r\n                                                                optionsRender={lotesRenderer}\r\n                                                                fetchOptions={(v) => loadLotesLookup(v, form.getFieldValue(\"formulacao\")[field.name]['matprima_cod'])}\r\n                                                            />\r\n                                                        </Field> */}\r\n                                </FieldSet>\r\n                                {/*                                                         </FieldSet> */}\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </>\r\n                );\r\n            }}\r\n        </Form.List>\r\n    );\r\n}\r\n\r\nexport default ({ record, setFormTitle, parentRef, closeParent, parentReload, wrapForm = \"form\", forInput = true }) => {\r\n    const [form] = Form.useForm();\r\n    const [loading, setLoading] = useState(true);\r\n    const [changedValues, setChangedValues] = useState({});\r\n    const [formStatus, setFormStatus] = useState({ error: [], warning: [], info: [], success: [] });\r\n    const [guides, setGuides] = useState(false);\r\n    const [operation, setOperation] = useState(setId(record.artigospecs_id));\r\n    const [resultMessage, setResultMessage] = useState({ status: \"none\" });\r\n    const [matPrimasLookup, setMatPrimasLookup] = useState([]);\r\n    const extrusoraRef = useRef();\r\n    const [inputRef, setInputFocus] = useFocus();\r\n    const [extrusora, setExtrusora] = useState('A');\r\n    const { lastJsonMessage, sendJsonMessage } = useWebSocket(`${SOCKET.url}/lotespick`, {\r\n        onOpen: () => console.log(`Connected to Web Socket`),\r\n        /*         onMessage: (v) => {\r\n                    if (lastJsonMessage) {\r\n                        console.log(v,lastJsonMessage);\r\n                    }\r\n                }, */\r\n        queryParams: { 'token': '123456' },\r\n        onError: (event) => { console.error(event); },\r\n        shouldReconnect: (closeEvent) => true,\r\n        reconnectInterval: 3000\r\n    });\r\n\r\n    const init = ({ lookup = false, token }) => {\r\n        (async () => {\r\n            if (lookup) {\r\n                setMatPrimasLookup(await loadMateriasPrimasLookup({ token }));\r\n            }\r\n\r\n            //Load das Matérias Primas em Buffer via Socket\r\n            const matPrimas = record.formulacao.items.map(({ matprima_cod }) => `'${matprima_cod}'`).join(',');\r\n            sendJsonMessage({ cmd: 'loadmatprimas', value: matPrimas, cs: record.id });\r\n\r\n            console.log(\"$$#$#$#$#$--\", record.nonwovens)\r\n            console.log(\"$$#$#$#$#$--\", record.quantity)\r\n            console.log(\"$$#$#$#$#$--\", record.produto)\r\n            console.log(\"$$#$#$#$#$--\", record.formulacao)\r\n            console.log(\"$$#$#$#$#$--\", record.lotes)\r\n\r\n            const gsmNwSup = record.nonwovens.nw_des_sup.split(new RegExp('gsm', 'i'))[0].trim().split(' ').pop();\r\n            const gsmNwInf = record.nonwovens.nw_des_inf.split(new RegExp('gsm', 'i'))[0].trim().split(' ').pop();\r\n            const filmeSqm = Number(record.quantity.square_meters) * (Number(gsmNwSup) + Number(gsmNwInf)) / Number(record.produto.gsm);\r\n\r\n            const lotes = { A: [], B: [], C: [] };\r\n            if (record.lotes && record.lotes.length > 0) {\r\n                console.log(\"$$#$#$#$#$-lotes-\", record.lotes);\r\n                throw 'TODO---------';\r\n            } else {\r\n                record.formulacao.items.forEach(v => {\r\n                    console.log(v.extrusora, \"-------\")\r\n                    const vitem = {\r\n                        qty_available: 0,\r\n                        lotes: [],\r\n                        qty: Math.round((filmeSqm * (Number(v.vglobal) / 100)), 2),\r\n                        type: 0, //lotes de extrusoras\r\n                        extrusora: v.extrusora,\r\n                        matprima_cod: v.matprima_cod\r\n                    };\r\n                    if (v.extrusora === 'BC') {\r\n                        lotes['B'].push({ ...vitem, extrusora: 'B' });\r\n                        lotes['C'].push({ ...vitem, extrusora: 'C' });\r\n                    } else {\r\n                        lotes[v.extrusora].push(vitem);\r\n                    }\r\n                    /* if (!('qty_available' in v)) v.qty_available = 0;\r\n                    if (!('lotes' in v)) v.lotes = [];\r\n                    if (!('qty' in v)) v.qty = Math.round((filmeSqm * (Number(v.vglobal) / 100)) * 0.1, 2);\r\n    \r\n                    console.log(v.vglobal, \"-------\", (filmeSqm * (Number(v.vglobal) / 100))) */\r\n\r\n                });\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n            form.setFieldsValue({ lotesA: lotes['A'], lotesB: lotes['B'], lotesC: lotes['C'] /* groupBy(record.formulacao.items, 'extrusora') */ });\r\n            setLoading(false);\r\n        })();\r\n    }\r\n\r\n    useEffect(() => {\r\n        const cancelFetch = cancelToken();\r\n        init({ lookup: true, token: cancelFetch });\r\n        return (() => cancelFetch.cancel(\"Form Lotes Cancelled\"));\r\n    }, []);\r\n\r\n    const onValuesChange = (changedValues) => {\r\n        console.log(\"CHANGEDDDDD--\", changedValues, \" EXTRUSORA SELECIONADA--\", extrusora);\r\n        setChangedValues(changedValues);\r\n    }\r\n\r\n    const onFinish = async (values) => {\r\n        /* const status = { error: [], warning: [], info: [], success: [] };\r\n        const v = schema().validate(values, { abortEarly: false });\r\n        if (!v.error) {\r\n            let error = false;\r\n            for (let k in values) {\r\n                if (values[k] === undefined && k !== \"cliente_cod\" && k !== \"designacao\") {\r\n                    error = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (error) {\r\n                status.error.push({ message: \"Os items têm de estar preenchidos!\" });\r\n            }\r\n            if (status.error.length === 0) {\r\n                const { cliente_cod: { value: cliente_cod, label: cliente_nome } = {} } = values;\r\n                const response = await fetchPost({ url: `${API_URL}/newartigospecs/`, parameters: { ...form.getFieldsValue(true), produto_id: ctx.produto_id, cliente_cod, cliente_nome } });\r\n                if (response.data.status !== \"error\") {\r\n                    parentReload({ artigospecs_id: record.artigospecs_id }, \"init\");\r\n                }\r\n                setResultMessage(response.data);\r\n            }\r\n        }\r\n        setFormStatus(status); */\r\n    }\r\n\r\n    const onSuccessOK = () => {\r\n        if (operation.key === \"insert\") {\r\n            form.resetFields();\r\n            init();\r\n            setResultMessage({ status: \"none\" });\r\n        }\r\n    }\r\n\r\n    const onErrorOK = () => {\r\n        setResultMessage({ status: \"none\" });\r\n    }\r\n\r\n    const onClose = (reload = false) => {\r\n        closeParent();\r\n    }\r\n\r\n    /*     const ItemLabelRenderer = ({ d }) => {\r\n            return (\r\n                <div>\r\n                    <div>{d[\"LOT_0\"]}</div>\r\n                    <Space><div>{d[\"QTYPCU_0\"]}{d[\"PCUORI_0\"]}</div></Space>\r\n                </div>\r\n            );\r\n        } */\r\n\r\n    /*     const lotesRenderer = (d) => {\r\n            return { label: <ItemLabelRenderer d={d} />, key: d[\"LOT_0\"], value: d[\"LOT_0\"] };\r\n        } */\r\n\r\n    useEffect(() => {\r\n        if (lastJsonMessage && lastJsonMessage.length > 0) {\r\n            const eA = [];\r\n            const eB = [];\r\n            const eC = [];\r\n            let idx = -1;\r\n            if (extrusora === 'A') {\r\n                eA.push(...form.getFieldValue('lotesA'));\r\n                idx = eA.findIndex(v => v.extrusora === 'A' && v.matprima_cod === lastJsonMessage[0].ITMREF_0);\r\n                if (idx >= 0) {\r\n                    if (eA[idx].lotes.findIndex(v => v.lote === lastJsonMessage[0].LOT_0) === -1) {\r\n                        eA[idx].lotes = [...eA[idx].lotes,{ lote: lastJsonMessage[0].LOT_0, qty: Math.round(lastJsonMessage[0].QTYPCU_0, 2), unit: lastJsonMessage[0].PCUORI_0 }];\r\n                        eA[idx].qty_available = eA[idx].lotes.reduce((basket, itm) => (itm.qty + basket),0);\r\n                        console.log('picjeddddd',eA[idx].lotes.reduce((prev, v) => (v.qty + prev),0))\r\n                        //eA[idx].lotes.forEach(e => { eA[idx].qty_available += e.qty; });\r\n                        form.setFieldsValue({lotesA:eA});\r\n                    }\r\n                }\r\n            } else {\r\n                eB.push(...form.getFieldValue('lotesB'));\r\n                eC.push(...form.getFieldValue('lotesC'));\r\n                idx = eB.findIndex(v => v.extrusora === 'B' && v.matprima_cod === lastJsonMessage[0].ITMREF_0);\r\n                if (idx >= 0) {\r\n                    if (eB[idx].lotes.findIndex(v => v.lote === lastJsonMessage[0].LOT_0) === -1) {\r\n                        eB[idx].lotes = [...eB[idx].lotes,{ lote: lastJsonMessage[0].LOT_0, qty: Math.round(lastJsonMessage[0].QTYPCU_0, 2), unit: lastJsonMessage[0].PCUORI_0 }];\r\n                        eB[idx].qty_available = eB[idx].lotes.reduce((basket, itm) => (itm.qty + basket),0);\r\n                        //eB[idx].lotes.forEach(e => { eB[idx].qty_available += e.qty; });\r\n                        eC[idx].lotes = [...eC[idx].lotes,{ lote: lastJsonMessage[0].LOT_0, qty: Math.round(lastJsonMessage[0].QTYPCU_0, 2), unit: lastJsonMessage[0].PCUORI_0 }];\r\n                        eC[idx].qty_available = eC[idx].lotes.reduce((basket, itm) => (itm.qty + basket),0);\r\n                        //eC[idx].lotes.forEach(e => { eC[idx].qty_available += e.qty; });\r\n                        form.setFieldsValue({lotesB:eB,lotesC:eC});\r\n                    }\r\n                }\r\n            }\r\n           \r\n\r\n\r\n\r\n\r\n            // let _extrusora = extrusora;\r\n            // if (_extrusora === 'A') {\r\n            //     selExtrusora.push(...form.getFieldValue('lotesA'));\r\n            // } else {\r\n            //     selExtrusora.push(...form.getFieldValue('lotesB'));\r\n            //     _extrusora='B';\r\n            // }\r\n            // const idx = selExtrusora.findIndex(v => v.extrusora === _extrusora && v.matprima_cod === lastJsonMessage[0].ITMREF_0);\r\n            // if (idx >= 0) {\r\n            //     if (selExtrusora[idx].lotes.findIndex(v => v.lote === lastJsonMessage[0].LOT_0) === -1) {\r\n            //         const lt = { lote: lastJsonMessage[0].LOT_0, qty: Math.round(lastJsonMessage[0].QTYPCU_0, 2), unit: lastJsonMessage[0].PCUORI_0 };\r\n            //         selExtrusora[idx].lotes = [...selExtrusora[idx].lotes,{...lt}];\r\n            //         selExtrusora[idx].qty_available = selExtrusora[idx].lotes.reduce((basket, itm) => (itm.qty + basket));\r\n            //         selExtrusora[idx].lotes.forEach(e => { selExtrusora[idx].qty_available += e.qty; });\r\n            //         if (extrusora==='BC'){\r\n            //             selExtrusora[idx].lotes = [...selExtrusora[idx].lotes,{...lt}];\r\n            //             selExtrusora[idx].qty_available = selExtrusora[idx].lotes.reduce((basket, itm) => (itm.qty + basket));\r\n            //             selExtrusora[idx].lotes.forEach(e => { selExtrusora[idx].qty_available += e.qty; });\r\n            //         }\r\n\r\n            //         console.log(\"TO PICKKKK\",extrusora,selExtrusora,lt);\r\n            //         //fv[idx].lotes = [...fv[idx].lotes, { lote: lastJsonMessage[0].LOT_0, qty: Math.round(lastJsonMessage[0].QTYPCU_0, 2), unit: lastJsonMessage[0].PCUORI_0 }];\r\n            //         ////fv[idx].qty_available = fv[idx].lotes.reduce((basket, itm) => (itm.qty + basket));\r\n            //         //fv[idx].lotes.forEach(e => { fv[idx].qty_available += e.qty; });\r\n            //         //form.setFieldsValue(fv);\r\n            //     }\r\n            // }\r\n\r\n            // const idx = fv.findIndex(v => v.extrusora === extrusora && v.matprima_cod === lastJsonMessage[0].ITMREF_0);\r\n            // if (idx >= 0) {\r\n            //     if (fv[idx].lotes.findIndex(v => v.lote === lastJsonMessage[0].LOT_0) === -1) {\r\n            //         fv[idx].lotes = [...fv[idx].lotes, { lote: lastJsonMessage[0].LOT_0, qty: Math.round(lastJsonMessage[0].QTYPCU_0, 2), unit: lastJsonMessage[0].PCUORI_0 }];\r\n            //         //fv[idx].qty_available = fv[idx].lotes.reduce((basket, itm) => (itm.qty + basket));\r\n            //         fv[idx].lotes.forEach(e => { fv[idx].qty_available += e.qty; });\r\n            //         form.setFieldsValue(fv);\r\n            //     }\r\n            // }\r\n            // /* const fv = form.getFieldsValue(true);\r\n            // const lotes = !(\"lotes\" in fv) ? [] : fv.lotes;\r\n            // lotes.push({ lote_cod: lastJsonMessage[0].LOT_0 });\r\n            // fv.lotes = lotes; \r\n            // form.setFieldsValue(fv);\r\n            // */\r\n\r\n        }\r\n        inputRef.current.value = '';\r\n\r\n    }, [lastJsonMessage]);\r\n\r\n    const onManualPick = (v) => {\r\n        sendJsonMessage({ cmd: 'pick', value: v.key, cs: record.id });\r\n    }\r\n\r\n    const onPick = (e, a, b) => {\r\n        if (e.keyCode == 9 || e.keyCode == 13) {\r\n            if (inputRef.current.value !== '') {\r\n                e.preventDefault();\r\n                sendJsonMessage({ cmd: 'pick', value: inputRef.current.value, cs: record.id });\r\n                //setInputFocus();\r\n            }\r\n            //console.log(\"----\",inputRef.current.state.value,'----',fv);\r\n        } else {\r\n            console.log(\"xxxx->\", e)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ResultMessage\r\n                result={resultMessage}\r\n                successButtonOK={operation.key === \"insert\" && <Button type=\"primary\" key=\"goto-of\" onClick={onSuccessOK}>Lotes de Matérias Primas</Button>}\r\n                successButtonClose={<Button key=\"goto-close\" onClick={() => onClose(true)}>Fechar</Button>}\r\n                errorButtonOK={<Button type=\"primary\" key=\"goto-ok\" onClick={onErrorOK}>OK</Button>}\r\n                errorButtonClose={<Button key=\"goto-close\" onClick={onClose}>Fechar</Button>}\r\n            >\r\n                <AlertsContainer id=\"el-external\" />\r\n                <AlertMessages formStatus={formStatus} />\r\n                <Form form={form} name={`flotes`} onFinish={onFinish} onValuesChange={onValuesChange} component={wrapForm}>\r\n                    <FormLayout\r\n                        id=\"LAY-LOTES\"\r\n                        guides={guides}\r\n                        layout=\"vertical\"\r\n                        style={{ width: \"100%\", padding: \"0px\", height: \"65vh\" /* , minWidth: \"700px\" */ }}\r\n                        schema={schema}\r\n                        field={{\r\n                            forInput,\r\n                            wide: [16],\r\n                            margin: \"2px\", overflow: false, guides: false,\r\n                            label: { enabled: true, pos: \"top\", align: \"start\", vAlign: \"center\", /* width: \"80px\", */ wrap: false, overflow: false, colon: true, ellipsis: true },\r\n                            alert: { pos: \"right\", tooltip: true, container: false /* container: \"el-external\" */ },\r\n                            layout: { top: \"\", right: \"\", center: \"\", bottom: \"\", left: \"\" },\r\n                            required: true,\r\n                            style: { alignSelf: \"top\" }\r\n                        }}\r\n                        fieldSet={{\r\n                            guides: false,\r\n                            wide: 16, margin: \"2px\", layout: \"horizontal\", overflow: false\r\n                        }}\r\n                    >\r\n\r\n                        <FieldSet wide={16} margin={false} field={{ wide: [4, 6, 6] }}>\r\n                            <FieldItem label={{ enabled: false }} style={{ textAlign: \"center\" }}>\r\n                                <MenuExtrusoras setExtrusora={setExtrusora} extrusora={extrusora} setFocus={() => setInputFocus(inputRef)} />\r\n                            </FieldItem>\r\n                            <FieldItem label={{ enabled: false }}><input className=\"ant-input ant-input-lg\" ref={inputRef} onKeyDown={onPick} autoFocus /></FieldItem>\r\n                            <Field required={false} layout={{ center: \"align-self:center;\", right: \"align-self:center;\" }} label={{ enabled: false }}>\r\n                                <SelectDebounceField\r\n                                    defaultActiveFirstOption\r\n                                    placeholder=\"Lote Picagem Manual\"\r\n                                    size=\"large\"\r\n                                    keyField=\"LOT_0\"\r\n                                    textField=\"LOT_0\"\r\n                                    showSearch\r\n                                    showArrow\r\n                                    allowClear\r\n                                    onSelect={onManualPick}\r\n                                    fetchOptions={(v) => loadLotesLookup(v)}\r\n                                />\r\n                            </Field>\r\n                        </FieldSet>\r\n\r\n                        <YScroll>\r\n                            <FieldSet layout=\"horizontal\" margin={false}>\r\n                                <FieldSet layout=\"vertical\" split={2} margin={false}>\r\n                                    <Extrusora id='A' form={form} extrusoraRef={extrusoraRef} matPrimasLookup={matPrimasLookup} />\r\n                                </FieldSet>\r\n                                <FieldSet layout=\"vertical\" split={2} margin={false}>\r\n                                    <Extrusora id='B' form={form} extrusoraRef={extrusoraRef} matPrimasLookup={matPrimasLookup} />\r\n                                    <Extrusora id='C' form={form} extrusoraRef={extrusoraRef} matPrimasLookup={matPrimasLookup} />\r\n                                </FieldSet>\r\n                            </FieldSet>\r\n                        </YScroll>\r\n\r\n\r\n                    </FormLayout>\r\n                </Form>\r\n                {parentRef && <Portal elId={parentRef.current}>\r\n                    <Space>\r\n                        <Button type=\"primary\" onClick={() => form.submit()}>Registar</Button>\r\n                        <Button onClick={() => setGuides(!guides)}>{guides ? \"No Guides\" : \"Guides\"}</Button>\r\n                    </Space>\r\n                </Portal>\r\n                }\r\n            </ResultMessage>\r\n        </>\r\n    );\r\n}"],"names":["schema","keys","excludeKeys","getSchema","unknown","loadMateriasPrimasLookup","token","fetchPost","url","API_URL","filter","sort","cancelToken","rows","data","loadLotesLookup","lote_cod","item_cod","pagination","limit","loc_cod","TitleExtrusora","value","extrusoraRef","show","useRef","useEffect","current","wide","layout","margin","field","label","enabled","style","fontWeight","fontSize","textAlign","StyledButtonMenu","styled","Button","withConfig","shouldForwardProp","prop","includes","first","css","MenuExtrusoras","setExtrusora","extrusora","setFocus","onSelect","v","type","size","onClick","Extrusora","form","id","matPrimasLookup","name","fields","add","remove","move","map","index","key","getFieldValue","alignSelf","backgroundColor","tabIndex","FORMULACAO_MANGUEIRAS","keyField","textField","optionsRender","d","forInput","showSearch","filterOption","input","option","toLowerCase","indexOf","qty","qty_available","color","wrap","lotes","idx","padding","closable","lote","unit","htmlElRef","record","parentRef","setFormTitle","closeParent","parentReload","wrapForm","Form","useState","setLoading","setChangedValues","error","warning","info","success","formStatus","guides","setGuides","artigospecs_id","values","operation","status","resultMessage","setResultMessage","setMatPrimasLookup","focus","inputRef","setInputFocus","useWebSocket","SOCKET","onOpen","queryParams","onError","event","shouldReconnect","closeEvent","reconnectInterval","lastJsonMessage","sendJsonMessage","init","lookup","matPrimas","formulacao","items","matprima_cod","join","cmd","cs","gsmNwSup","nonwovens","nw_des_sup","split","RegExp","trim","pop","gsmNwInf","nw_des_inf","filmeSqm","Number","quantity","square_meters","produto","gsm","A","B","C","length","forEach","vitem","Math","round","vglobal","push","setFieldsValue","lotesA","lotesB","lotesC","cancelFetch","cancel","onFinish","onClose","eA","eB","eC","findIndex","ITMREF_0","LOT_0","QTYPCU_0","PCUORI_0","reduce","basket","itm","result","successButtonOK","resetFields","successButtonClose","errorButtonOK","errorButtonClose","onValuesChange","changedValues","component","width","height","overflow","pos","align","vAlign","colon","ellipsis","alert","tooltip","container","top","right","center","bottom","left","required","fieldSet","className","ref","onKeyDown","e","a","b","keyCode","preventDefault","autoFocus","defaultActiveFirstOption","placeholder","showArrow","allowClear","fetchOptions","elId","submit"],"sourceRoot":""}