{"version":3,"file":"chunks/vendors-node_modules_antd_es_input-number_index_js.chunk.js","mappings":"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AACA;AACA;AACA;AACA;AACA,MAAM,WAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR,QAAQ,8DAAO;AACf;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACpE0C;AACT;AACjC;AACA;AACA;;AAEA,iEAAgB;AAChB,cAAc,6CAAM;;AAEpB;AACA,IAAI,6DAAU;AACd;;AAEA,EAAE,gDAAS;AACX;AACA,GAAG;AACH;AACA;AACA,oBAAoB,0DAAG;AACvB;AACA,KAAK;AACL;AACA,CAAC;;;;;;;;;;;;;;;;ACtB8B;AACkB;AAC1C,sBAAsB,oEAAS,KAAK,kDAAqB,GAAG,4CAAe;;;;;;;;;;;;;;;;ACFnD;AACqB;AACpD;AACA;AACA;;AAEe;AACf,gBAAgB,yCAAY;AAC5B,EAAE,iEAAe;AACjB;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;;;;;;;;;;;;;;AChBwC;AACxC,iEAAe,oDAAW;;;;;;;;;;;;;;;;;;;;;ACD8C;AACN;;AAElE;AAC4F;AAC9C;AAC9C;AACA;AACA;;AAEO;AACP;AACA,IAAI,qFAAe;;AAEnB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,EAAE,kFAAY;AACd;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,yCAAyC;;AAEzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kCAAkC,+DAAkB,eAAe,+DAAkB;AACrF;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,oDAAO;AACpB;AACA,GAAG;;AAEH;AACA,CAAC;AACM;AACP;AACA;AACA,IAAI,qFAAe;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC;;AAEjC;AACA;AACA;AACA;;AAEA,6BAA6B;;AAE7B,QAAQ,gDAAG;AACX;AACA;;AAEA,kEAAkE,oDAAO;;AAEzE,QAAQ,2DAAc;AACtB,oBAAoB,uDAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA,EAAE,kFAAY;AACd;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2EAA2E;;AAE3E,wBAAwB,uDAAU;AAClC;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,uDAAU;AACvB;AACA,GAAG;;AAEH;AACA,CAAC;AACc;AACf;AACA;AACA,MAAM,2DAAa;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA,qBAAqB,uDAAU;AAC/B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACvT8C;AAC9C;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA,oBAAoB,2DAAa;AACjC;;AAEA;AACA,oBAAoB,2DAAa;AACjC;;AAEA;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtGO;AACP;AACA","sources":["webpack://sgp/./node_modules/@ant-design/icons-svg/es/asn/UpOutlined.js","webpack://sgp/./node_modules/@ant-design/icons/es/icons/UpOutlined.js","webpack://sgp/./node_modules/antd/es/input-number/index.js","webpack://sgp/./node_modules/rc-input-number/es/InputNumber.js","webpack://sgp/./node_modules/rc-input-number/es/StepHandler.js","webpack://sgp/./node_modules/rc-input-number/es/hooks/useCursor.js","webpack://sgp/./node_modules/rc-input-number/es/hooks/useFrame.js","webpack://sgp/./node_modules/rc-input-number/es/hooks/useLayoutEffect.js","webpack://sgp/./node_modules/rc-input-number/es/hooks/useUpdateEffect.js","webpack://sgp/./node_modules/rc-input-number/es/index.js","webpack://sgp/./node_modules/rc-input-number/es/utils/MiniDecimal.js","webpack://sgp/./node_modules/rc-input-number/es/utils/numberUtil.js","webpack://sgp/./node_modules/rc-input-number/es/utils/supportUtil.js"],"sourcesContent":["// This icon file is generated automatically.\nvar UpOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M890.5 755.3L537.9 269.2c-12.8-17.6-39-17.6-51.7 0L133.5 755.3A8 8 0 00140 768h75c5.1 0 9.9-2.5 12.9-6.6L512 369.8l284.1 391.6c3 4.1 7.8 6.6 12.9 6.6h75c6.5 0 10.3-7.4 6.5-12.7z\" } }] }, \"name\": \"up\", \"theme\": \"outlined\" };\nexport default UpOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport UpOutlinedSvg from \"@ant-design/icons-svg/es/asn/UpOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar UpOutlined = function UpOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: UpOutlinedSvg\n  }));\n};\n\nUpOutlined.displayName = 'UpOutlined';\nexport default /*#__PURE__*/React.forwardRef(UpOutlined);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport UpOutlined from \"@ant-design/icons/es/icons/UpOutlined\";\nimport classNames from 'classnames';\nimport RcInputNumber from 'rc-input-number';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { ConfigContext } from '../config-provider';\nimport SizeContext from '../config-provider/SizeContext';\nimport { FormItemStatusContext, NoFormStatus } from '../form/context';\nimport { cloneElement } from '../_util/reactNode';\nimport { getFeedbackIcon, getStatusClassNames, getMergedStatus } from '../_util/statusUtils';\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var size = React.useContext(SizeContext);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focused = _React$useState2[0],\n      setFocus = _React$useState2[1];\n\n  var inputRef = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    return inputRef.current;\n  });\n\n  var className = props.className,\n      customizeSize = props.size,\n      customizePrefixCls = props.prefixCls,\n      addonBefore = props.addonBefore,\n      addonAfter = props.addonAfter,\n      prefix = props.prefix,\n      _props$bordered = props.bordered,\n      bordered = _props$bordered === void 0 ? true : _props$bordered,\n      readOnly = props.readOnly,\n      customStatus = props.status,\n      controls = props.controls,\n      others = __rest(props, [\"className\", \"size\", \"prefixCls\", \"addonBefore\", \"addonAfter\", \"prefix\", \"bordered\", \"readOnly\", \"status\", \"controls\"]);\n\n  var prefixCls = getPrefixCls('input-number', customizePrefixCls);\n  var upIcon = /*#__PURE__*/React.createElement(UpOutlined, {\n    className: \"\".concat(prefixCls, \"-handler-up-inner\")\n  });\n  var downIcon = /*#__PURE__*/React.createElement(DownOutlined, {\n    className: \"\".concat(prefixCls, \"-handler-down-inner\")\n  });\n  var controlsTemp = typeof controls === 'boolean' ? controls : undefined;\n\n  if (_typeof(controls) === 'object') {\n    upIcon = typeof controls.upIcon === 'undefined' ? upIcon : /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-handler-up-inner\")\n    }, controls.upIcon);\n    downIcon = typeof controls.downIcon === 'undefined' ? downIcon : /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-handler-down-inner\")\n    }, controls.downIcon);\n  }\n\n  var _useContext = useContext(FormItemStatusContext),\n      hasFeedback = _useContext.hasFeedback,\n      contextStatus = _useContext.status;\n\n  var mergedStatus = getMergedStatus(contextStatus, customStatus);\n  var mergeSize = customizeSize || size;\n  var inputNumberClass = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-lg\"), mergeSize === 'large'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-sm\"), mergeSize === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_classNames, \"\".concat(prefixCls, \"-borderless\"), !bordered), _classNames), getStatusClassNames(prefixCls, mergedStatus), className);\n  var element = /*#__PURE__*/React.createElement(RcInputNumber, _extends({\n    ref: inputRef,\n    className: inputNumberClass,\n    upHandler: upIcon,\n    downHandler: downIcon,\n    prefixCls: prefixCls,\n    readOnly: readOnly,\n    controls: controlsTemp\n  }, others));\n\n  if (prefix != null || hasFeedback) {\n    var _classNames2;\n\n    var affixWrapperCls = classNames(\"\".concat(prefixCls, \"-affix-wrapper\"), getStatusClassNames(\"\".concat(prefixCls, \"-affix-wrapper\"), mergedStatus, hasFeedback), (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-affix-wrapper-focused\"), focused), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-affix-wrapper-disabled\"), props.disabled), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-affix-wrapper-sm\"), size === 'small'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-affix-wrapper-lg\"), size === 'large'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-affix-wrapper-rtl\"), direction === 'rtl'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-affix-wrapper-readonly\"), readOnly), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-affix-wrapper-borderless\"), !bordered), _defineProperty(_classNames2, \"\".concat(className), !(addonBefore || addonAfter) && className), _classNames2));\n    element = /*#__PURE__*/React.createElement(\"div\", {\n      className: affixWrapperCls,\n      style: props.style,\n      onMouseUp: function onMouseUp() {\n        return inputRef.current.focus();\n      }\n    }, prefix && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-prefix\")\n    }, prefix), cloneElement(element, {\n      style: null,\n      value: props.value,\n      onFocus: function onFocus(event) {\n        var _a;\n\n        setFocus(true);\n        (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, event);\n      },\n      onBlur: function onBlur(event) {\n        var _a;\n\n        setFocus(false);\n        (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, event);\n      }\n    }), hasFeedback && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-suffix\")\n    }, getFeedbackIcon(prefixCls, mergedStatus)));\n  }\n\n  if (addonBefore != null || addonAfter != null) {\n    var _classNames4;\n\n    var wrapperClassName = \"\".concat(prefixCls, \"-group\");\n    var addonClassName = \"\".concat(wrapperClassName, \"-addon\");\n    var addonBeforeNode = addonBefore ? /*#__PURE__*/React.createElement(\"div\", {\n      className: addonClassName\n    }, addonBefore) : null;\n    var addonAfterNode = addonAfter ? /*#__PURE__*/React.createElement(\"div\", {\n      className: addonClassName\n    }, addonAfter) : null;\n    var mergedWrapperClassName = classNames(\"\".concat(prefixCls, \"-wrapper\"), wrapperClassName, _defineProperty({}, \"\".concat(wrapperClassName, \"-rtl\"), direction === 'rtl'));\n    var mergedGroupClassName = classNames(\"\".concat(prefixCls, \"-group-wrapper\"), (_classNames4 = {}, _defineProperty(_classNames4, \"\".concat(prefixCls, \"-group-wrapper-sm\"), size === 'small'), _defineProperty(_classNames4, \"\".concat(prefixCls, \"-group-wrapper-lg\"), size === 'large'), _defineProperty(_classNames4, \"\".concat(prefixCls, \"-group-wrapper-rtl\"), direction === 'rtl'), _classNames4), getStatusClassNames(\"\".concat(prefixCls, \"-group-wrapper\"), mergedStatus, hasFeedback), className);\n    element = /*#__PURE__*/React.createElement(\"div\", {\n      className: mergedGroupClassName,\n      style: props.style\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: mergedWrapperClassName\n    }, addonBeforeNode && /*#__PURE__*/React.createElement(NoFormStatus, null, addonBeforeNode), cloneElement(element, {\n      style: null\n    }), addonAfterNode && /*#__PURE__*/React.createElement(NoFormStatus, null, addonAfterNode)));\n  }\n\n  return element;\n});\nexport default InputNumber;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"className\", \"style\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readOnly\", \"upHandler\", \"downHandler\", \"keyboard\", \"controls\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\"];\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport getMiniDecimal, { toFixed } from './utils/MiniDecimal';\nimport StepHandler from './StepHandler';\nimport { getNumberPrecision, num2str, validateNumber } from './utils/numberUtil';\nimport useCursor from './hooks/useCursor';\nimport useUpdateEffect from './hooks/useUpdateEffect';\nimport useFrame from './hooks/useFrame';\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n */\n\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n\n  return decimalValue.toNumber();\n};\n\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\n\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,\n      className = props.className,\n      style = props.style,\n      min = props.min,\n      max = props.max,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 1 : _props$step,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      upHandler = props.upHandler,\n      downHandler = props.downHandler,\n      keyboard = props.keyboard,\n      _props$controls = props.controls,\n      controls = _props$controls === void 0 ? true : _props$controls,\n      stringMode = props.stringMode,\n      parser = props.parser,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      onChange = props.onChange,\n      onInput = props.onInput,\n      onPressEnter = props.onPressEnter,\n      onStep = props.onStep,\n      inputProps = _objectWithoutProperties(props, _excluded);\n\n  var inputClassName = \"\".concat(prefixCls, \"-input\");\n  var inputRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focus = _React$useState2[0],\n      setFocus = _React$useState2[1];\n\n  var userTypingRef = React.useRef(false);\n  var compositionRef = React.useRef(false); // ============================ Value =============================\n  // Real value control\n\n  var _React$useState3 = React.useState(function () {\n    return getMiniDecimal(value !== null && value !== void 0 ? value : defaultValue);\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      decimalValue = _React$useState4[0],\n      setDecimalValue = _React$useState4[1];\n\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  } // ====================== Parser & Formatter ======================\n\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n\n\n  var getPrecision = React.useCallback(function (numStr, userTyping) {\n    if (userTyping) {\n      return undefined;\n    }\n\n    if (precision >= 0) {\n      return precision;\n    }\n\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]); // >>> Parser\n\n  var mergedParser = React.useCallback(function (num) {\n    var numStr = String(num);\n\n    if (parser) {\n      return parser(numStr);\n    }\n\n    var parsedStr = numStr;\n\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, '.');\n    } // [Legacy] We still support auto convert `$ 123,456` to `123456`\n\n\n    return parsedStr.replace(/[^\\w.-]+/g, '');\n  }, [parser, decimalSeparator]); // >>> Formatter\n\n  var inputValueRef = React.useRef('');\n  var mergedFormatter = React.useCallback(function (number, userTyping) {\n    if (formatter) {\n      return formatter(number, {\n        userTyping: userTyping,\n        input: String(inputValueRef.current)\n      });\n    }\n\n    var str = typeof number === 'number' ? num2str(number) : number; // User typing will not auto format with precision directly\n\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || '.';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]); // ========================== InputValue ==========================\n\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It update with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n\n  var _React$useState5 = React.useState(function () {\n    var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n\n    if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n      return Number.isNaN(initValue) ? '' : initValue;\n    }\n\n    return mergedFormatter(decimalValue.toString(), false);\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      inputValue = _React$useState6[0],\n      setInternalInputValue = _React$useState6[1];\n\n  inputValueRef.current = inputValue; // Should always be string\n\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter( // Invalidate number is sometime passed by external control, we should let it go\n    // Otherwise is controlled by internal interactive logic which check by userTyping\n    // You can ref 'show limited value when input is not focused' test for more info.\n    newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping));\n  } // >>> Max & Min limit\n\n\n  var maxDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(max);\n  }, [max]);\n  var minDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(min);\n  }, [min]);\n  var upDisabled = React.useMemo(function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = React.useMemo(function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]); // Cursor controller\n\n  var _useCursor = useCursor(inputRef.current, focus),\n      _useCursor2 = _slicedToArray(_useCursor, 2),\n      recordCursor = _useCursor2[0],\n      restoreCursor = _useCursor2[1]; // ============================= Data =============================\n\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n\n\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    } // target < min\n\n\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n\n    return null;\n  };\n  /**\n   * Check value is in [min, max] range\n   */\n\n\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n\n\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue;\n    var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty(); // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n    // This should not block user typing\n\n    if (!updateValue.isEmpty() && !userTyping) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n      isRangeValidate = true;\n    }\n\n    if (!readOnly && !disabled && isRangeValidate) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));\n      } // Trigger event\n\n\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 ? void 0 : onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue)); // Reformat input if value is not controlled\n\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n\n      return updateValue;\n    }\n\n    return decimalValue;\n  }; // ========================== User Input ==========================\n\n\n  var onNextPromise = useFrame(); // >>> Collect input value\n\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor(); // Update inputValue incase input can not parse as number\n\n    setInternalInputValue(inputStr); // Parse number\n\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    } // Trigger onInput later to let user customize value if they want do handle something after onChange\n\n\n    onInput === null || onInput === void 0 ? void 0 : onInput(inputStr); // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n\n    onNextPromise(function () {\n      var nextInputStr = inputStr;\n\n      if (!parser) {\n        nextInputStr = inputStr.replace(/。/g, '.');\n      }\n\n      if (nextInputStr !== inputStr) {\n        collectInputValue(nextInputStr);\n      }\n    });\n  }; // >>> Composition\n\n\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  }; // >>> Input\n\n\n  var onInternalInput = function onInternalInput(e) {\n    collectInputValue(e.target.value);\n  }; // ============================= Step =============================\n\n\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current;\n\n    // Ignore step since out of range\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    } // Clear typing status since it may caused by up & down key.\n    // We should sync with input value.\n\n\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(step);\n\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 ? void 0 : onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: step,\n      type: up ? 'up' : 'down'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  }; // ============================ Flush =============================\n\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed\n   */\n\n\n  var flushInputValue = function flushInputValue(userTyping) {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, userTyping);\n    } else {\n      formatValue = decimalValue;\n    }\n\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    var which = event.which;\n    userTypingRef.current = true;\n\n    if (which === KeyCode.ENTER) {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n\n      flushInputValue(false);\n      onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(event);\n    }\n\n    if (keyboard === false) {\n      return;\n    } // Do step\n\n\n    if (!compositionRef.current && [KeyCode.UP, KeyCode.DOWN].includes(which)) {\n      onInternalStep(KeyCode.UP === which);\n      event.preventDefault();\n    }\n  };\n\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n  }; // >>> Focus & Blur\n\n\n  var onBlur = function onBlur() {\n    flushInputValue(false);\n    setFocus(false);\n    userTypingRef.current = false;\n  }; // ========================== Controlled ==========================\n  // Input by precision\n\n\n  useUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision]); // Input by value\n\n  useUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue);\n    var currentParsedValue = getMiniDecimal(mergedParser(inputValue)); // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n\n    if (!newValue.equals(currentParsedValue) || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, userTypingRef.current);\n    }\n  }, [value]); // ============================ Cursor ============================\n\n  useUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focus), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_classNames, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.isNaN()), _defineProperty(_classNames, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _classNames)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd\n  }, controls && /*#__PURE__*/React.createElement(StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(inputClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: composeRef(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nInputNumber.displayName = 'InputNumber';\nexport default InputNumber;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport isMobile from \"rc-util/es/isMobile\";\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\n\nvar STEP_INTERVAL = 200;\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\n\nvar STEP_DELAY = 600;\nexport default function StepHandler(_ref) {\n  var prefixCls = _ref.prefixCls,\n      upNode = _ref.upNode,\n      downNode = _ref.downNode,\n      upDisabled = _ref.upDisabled,\n      downDisabled = _ref.downDisabled,\n      onStep = _ref.onStep;\n  // ======================== Step ========================\n  var stepTimeoutRef = React.useRef();\n  var onStepRef = React.useRef();\n  onStepRef.current = onStep; // We will interval update step when hold mouse down\n\n  var onStepMouseDown = function onStepMouseDown(e, up) {\n    e.preventDefault();\n    onStepRef.current(up); // Loop step for interval\n\n    function loopStep() {\n      onStepRef.current(up);\n      stepTimeoutRef.current = setTimeout(loopStep, STEP_INTERVAL);\n    } // First time press will wait some time to trigger loop step update\n\n\n    stepTimeoutRef.current = setTimeout(loopStep, STEP_DELAY);\n  };\n\n  var onStopStep = function onStopStep() {\n    clearTimeout(stepTimeoutRef.current);\n  };\n\n  React.useEffect(function () {\n    return onStopStep;\n  }, []); // ======================= Render =======================\n\n  if (isMobile()) {\n    return null;\n  }\n\n  var handlerClassName = \"\".concat(prefixCls, \"-handler\");\n  var upClassName = classNames(handlerClassName, \"\".concat(handlerClassName, \"-up\"), _defineProperty({}, \"\".concat(handlerClassName, \"-up-disabled\"), upDisabled));\n  var downClassName = classNames(handlerClassName, \"\".concat(handlerClassName, \"-down\"), _defineProperty({}, \"\".concat(handlerClassName, \"-down-disabled\"), downDisabled));\n  var sharedHandlerProps = {\n    unselectable: 'on',\n    role: 'button',\n    onMouseUp: onStopStep,\n    onMouseLeave: onStopStep\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(handlerClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"span\", _extends({}, sharedHandlerProps, {\n    onMouseDown: function onMouseDown(e) {\n      onStepMouseDown(e, true);\n    },\n    \"aria-label\": \"Increase Value\",\n    \"aria-disabled\": upDisabled,\n    className: upClassName\n  }), upNode || /*#__PURE__*/React.createElement(\"span\", {\n    unselectable: \"on\",\n    className: \"\".concat(prefixCls, \"-handler-up-inner\")\n  })), /*#__PURE__*/React.createElement(\"span\", _extends({}, sharedHandlerProps, {\n    onMouseDown: function onMouseDown(e) {\n      onStepMouseDown(e, false);\n    },\n    \"aria-label\": \"Decrease Value\",\n    \"aria-disabled\": downDisabled,\n    className: downClassName\n  }), downNode || /*#__PURE__*/React.createElement(\"span\", {\n    unselectable: \"on\",\n    className: \"\".concat(prefixCls, \"-handler-down-inner\")\n  })));\n}","import { useRef } from 'react';\nimport warning from \"rc-util/es/warning\";\n/**\n * Keep input cursor in the correct position if possible.\n * Is this necessary since we have `formatter` which may mass the content?\n */\n\nexport default function useCursor(input, focused) {\n  var selectionRef = useRef(null);\n\n  function recordCursor() {\n    // Record position\n    try {\n      var start = input.selectionStart,\n          end = input.selectionEnd,\n          value = input.value;\n      var beforeTxt = value.substring(0, start);\n      var afterTxt = value.substring(end);\n      selectionRef.current = {\n        start: start,\n        end: end,\n        value: value,\n        beforeTxt: beforeTxt,\n        afterTxt: afterTxt\n      };\n    } catch (e) {// Fix error in Chrome:\n      // Failed to read the 'selectionStart' property from 'HTMLInputElement'\n      // http://stackoverflow.com/q/21177489/3040605\n    }\n  }\n  /**\n   * Restore logic:\n   *  1. back string same\n   *  2. start string same\n   */\n\n\n  function restoreCursor() {\n    if (input && selectionRef.current && focused) {\n      try {\n        var value = input.value;\n        var _selectionRef$current = selectionRef.current,\n            beforeTxt = _selectionRef$current.beforeTxt,\n            afterTxt = _selectionRef$current.afterTxt,\n            start = _selectionRef$current.start;\n        var startPos = value.length;\n\n        if (value.endsWith(afterTxt)) {\n          startPos = value.length - selectionRef.current.afterTxt.length;\n        } else if (value.startsWith(beforeTxt)) {\n          startPos = beforeTxt.length;\n        } else {\n          var beforeLastChar = beforeTxt[start - 1];\n          var newIndex = value.indexOf(beforeLastChar, start - 1);\n\n          if (newIndex !== -1) {\n            startPos = newIndex + 1;\n          }\n        }\n\n        input.setSelectionRange(startPos, startPos);\n      } catch (e) {\n        warning(false, \"Something warning of cursor restore. Please fire issue about this: \".concat(e.message));\n      }\n    }\n  }\n\n  return [recordCursor, restoreCursor];\n}","import { useRef, useEffect } from 'react';\nimport raf from \"rc-util/es/raf\";\n/**\n * Always trigger latest once when call multiple time\n */\n\nexport default (function () {\n  var idRef = useRef(0);\n\n  var cleanUp = function cleanUp() {\n    raf.cancel(idRef.current);\n  };\n\n  useEffect(function () {\n    return cleanUp;\n  }, []);\n  return function (callback) {\n    cleanUp();\n    idRef.current = raf(function () {\n      callback();\n    });\n  };\n});","import * as React from 'react';\nimport canUseDom from \"rc-util/es/Dom/canUseDom\";\nexport var useLayoutEffect = canUseDom() ? React.useLayoutEffect : React.useEffect;","import * as React from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n/**\n * Work as `componentDidUpdate`\n */\n\nexport default function useUpdateEffect(callback, condition) {\n  var initRef = React.useRef(false);\n  useLayoutEffect(function () {\n    if (!initRef.current) {\n      initRef.current = true;\n      return undefined;\n    }\n\n    return callback();\n  }, condition);\n}","import InputNumber from './InputNumber';\nexport default InputNumber;","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable max-classes-per-file */\nimport { getNumberPrecision, isE, num2str, trimNumber, validateNumber } from './numberUtil';\nimport { supportBigInt } from './supportUtil';\n/**\n * We can remove this when IE not support anymore\n */\n\nexport var NumberDecimal = /*#__PURE__*/function () {\n  function NumberDecimal(value) {\n    _classCallCheck(this, NumberDecimal);\n\n    this.origin = '';\n    this.number = void 0;\n    this.empty = void 0;\n\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value);\n    this.number = Number(value);\n  }\n\n  _createClass(NumberDecimal, [{\n    key: \"negate\",\n    value: function negate() {\n      return new NumberDecimal(-this.toNumber());\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new NumberDecimal(value);\n      }\n\n      var target = Number(value);\n\n      if (Number.isNaN(target)) {\n        return this;\n      }\n\n      var number = this.number + target; // [Legacy] Back to safe integer\n\n      if (number > Number.MAX_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MAX_SAFE_INTEGER);\n      }\n\n      if (number < Number.MIN_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MIN_SAFE_INTEGER);\n      }\n\n      var maxPrecision = Math.max(getNumberPrecision(this.number), getNumberPrecision(target));\n      return new NumberDecimal(number.toFixed(maxPrecision));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return Number.isNaN(this.number);\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toNumber() === (target === null || target === void 0 ? void 0 : target.toNumber());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return this.number;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return num2str(this.number);\n    }\n  }]);\n\n  return NumberDecimal;\n}();\nexport var BigIntDecimal = /*#__PURE__*/function () {\n  /** BigInt will convert `0009` to `9`. We need record the len of decimal */\n  function BigIntDecimal(value) {\n    _classCallCheck(this, BigIntDecimal);\n\n    this.origin = '';\n    this.negative = void 0;\n    this.integer = void 0;\n    this.decimal = void 0;\n    this.decimalLen = void 0;\n    this.empty = void 0;\n    this.nan = void 0;\n\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value); // Act like Number convert\n\n    if (value === '-') {\n      this.nan = true;\n      return;\n    }\n\n    var mergedValue = value; // We need convert back to Number since it require `toFixed` to handle this\n\n    if (isE(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);\n\n    if (validateNumber(mergedValue)) {\n      var trimRet = trimNumber(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split('.');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || '0';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n\n  _createClass(BigIntDecimal, [{\n    key: \"getMark\",\n    value: function getMark() {\n      return this.negative ? '-' : '';\n    }\n  }, {\n    key: \"getIntegerStr\",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n  }, {\n    key: \"getDecimalStr\",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, '0');\n    }\n    /**\n     * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */\n\n  }, {\n    key: \"alignDecimal\",\n    value: function alignDecimal(decimalLength) {\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\n      return BigInt(str);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n\n      var offset = new BigIntDecimal(value);\n\n      if (offset.isInvalidate()) {\n        return this;\n      }\n\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = (myAlignedDecimal + offsetAlignedDecimal).toString(); // We need fill string length back to `maxDecimalLength` to avoid parser failed\n\n      var _trimNumber = trimNumber(valueStr),\n          negativeStr = _trimNumber.negativeStr,\n          trimStr = _trimNumber.trimStr;\n\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(maxDecimalLength + 1, '0'));\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -maxDecimalLength), \".\").concat(hydrateValueStr.slice(-maxDecimalLength)));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n\n      return Number(this.toString());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n\n  return BigIntDecimal;\n}();\nexport default function getMiniDecimal(value) {\n  // We use BigInt here.\n  // Will fallback to Number if not support.\n  if (supportBigInt()) {\n    return new BigIntDecimal(value);\n  }\n\n  return new NumberDecimal(value);\n}\n/**\n * Align the logic of toFixed to around like 1.5 => 2\n */\n\nexport function toFixed(numStr, separatorStr, precision) {\n  if (numStr === '') {\n    return '';\n  }\n\n  var _trimNumber2 = trimNumber(numStr),\n      negativeStr = _trimNumber2.negativeStr,\n      integerStr = _trimNumber2.integerStr,\n      decimalStr = _trimNumber2.decimalStr;\n\n  var precisionDecimalStr = \"\".concat(separatorStr).concat(decimalStr);\n  var numberWithoutDecimal = \"\".concat(negativeStr).concat(integerStr);\n\n  if (precision >= 0) {\n    // We will get last + 1 number to check if need advanced number\n    var advancedNum = Number(decimalStr[precision]);\n\n    if (advancedNum >= 5) {\n      var advancedDecimal = getMiniDecimal(numStr).add(\"\".concat(negativeStr, \"0.\").concat('0'.repeat(precision)).concat(10 - advancedNum));\n      return toFixed(advancedDecimal.toString(), separatorStr, precision);\n    }\n\n    if (precision === 0) {\n      return numberWithoutDecimal;\n    }\n\n    return \"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));\n  }\n\n  if (precisionDecimalStr === '.0') {\n    return numberWithoutDecimal;\n  }\n\n  return \"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);\n}","import { supportBigInt } from './supportUtil';\n/**\n * Format string number to readable number\n */\n\nexport function trimNumber(numStr) {\n  var str = numStr.trim();\n  var negative = str.startsWith('-');\n\n  if (negative) {\n    str = str.slice(1);\n  }\n\n  str = str // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`\n  .replace(/(\\.\\d*[^0])0*$/, '$1') // Remove useless decimal. `1.` => `1`\n  .replace(/\\.0*$/, '') // Remove integer 0. `0001` => `1`, 000.1' => `.1`\n  .replace(/^0+/, '');\n\n  if (str.startsWith('.')) {\n    str = \"0\".concat(str);\n  }\n\n  var trimStr = str || '0';\n  var splitNumber = trimStr.split('.');\n  var integerStr = splitNumber[0] || '0';\n  var decimalStr = splitNumber[1] || '0';\n\n  if (integerStr === '0' && decimalStr === '0') {\n    negative = false;\n  }\n\n  var negativeStr = negative ? '-' : '';\n  return {\n    negative: negative,\n    negativeStr: negativeStr,\n    trimStr: trimStr,\n    integerStr: integerStr,\n    decimalStr: decimalStr,\n    fullStr: \"\".concat(negativeStr).concat(trimStr)\n  };\n}\nexport function isE(number) {\n  var str = String(number);\n  return !Number.isNaN(Number(str)) && str.includes('e');\n}\n/**\n * [Legacy] Convert 1e-9 to 0.000000001.\n * This may lose some precision if user really want 1e-9.\n */\n\nexport function getNumberPrecision(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    var precision = Number(numStr.slice(numStr.indexOf('e-') + 2));\n    var decimalMatch = numStr.match(/\\.(\\d+)/);\n\n    if (decimalMatch === null || decimalMatch === void 0 ? void 0 : decimalMatch[1]) {\n      precision += decimalMatch[1].length;\n    }\n\n    return precision;\n  }\n\n  return numStr.includes('.') && validateNumber(numStr) ? numStr.length - numStr.indexOf('.') - 1 : 0;\n}\n/**\n * Convert number (includes scientific notation) to -xxx.yyy format\n */\n\nexport function num2str(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    if (number > Number.MAX_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);\n    }\n\n    if (number < Number.MIN_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);\n    }\n\n    numStr = number.toFixed(getNumberPrecision(numStr));\n  }\n\n  return trimNumber(numStr).fullStr;\n}\nexport function validateNumber(num) {\n  if (typeof num === 'number') {\n    return !Number.isNaN(num);\n  } // Empty\n\n\n  if (!num) {\n    return false;\n  }\n\n  return (// Normal type: 11.28\n    /^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num) || // Pre-number: 1.\n    /^\\s*-?\\d+\\.\\s*$/.test(num) || // Post-number: .1\n    /^\\s*-?\\.\\d+\\s*$/.test(num)\n  );\n}","export function supportBigInt() {\n  return typeof BigInt === 'function';\n}"],"names":[],"sourceRoot":""}