{"version":3,"file":"chunks/428/751284aa03a4c6ee9190.chunk.js","mappings":"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","sources":["webpack://sgp/./src/pages/currentline/FormCortesUpsert.jsx","webpack://sgp/./src/pages/currentline/FormCortes.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\r\nimport { createUseStyles } from 'react-jss';\r\nimport styled from 'styled-components';\r\nimport dayjs from 'dayjs';\r\nimport Joi from 'joi';\r\nimport { fetch, fetchPost } from \"utils/fetch\";\r\nimport { API_URL } from \"config\";\r\nimport { getSchema } from \"utils/schemaValidator\";\r\nimport { FormLayout, Field, FieldSet, FieldItem, AlertsContainer, Item, SelectField, CheckboxField, HorizontalRule, VerticalSpace } from \"components/formLayout\";\r\nimport AlertMessages from \"components/alertMessages\";\r\nimport IconButton from \"components/iconButton\";\r\nimport ResultMessage from 'components/resultMessage';\r\nimport Portal from \"components/portal\";\r\nimport { Input, Space, Form, Button, InputNumber, Menu, Dropdown } from \"antd\";\r\nimport { EllipsisOutlined } from '@ant-design/icons';\r\nimport { DATE_FORMAT, DATETIME_FORMAT } from 'config';\r\nimport { useDrag, useDrop, DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport { useImmer } from \"use-immer\";\r\n\r\nconst schema = (keys, excludeKeys) => {\r\n    return getSchema({}, keys, excludeKeys).unknown(true);\r\n}\r\n\r\nconst useStyles = createUseStyles({\r\n    bobine: {\r\n        cursor: \"move\",\r\n        border: \"solid 1px #bfbfbf\",\r\n        height: \"150px\",\r\n        boxShadow: \"2px 1px 2px #f0f0f0\",\r\n        margin: \"3px\",\r\n        borderRadius: \"3px\",\r\n        width: (props) => `${props.width}%`,\r\n        '&:hover': {\r\n            backgroundColor: \"#e6f7ff\"\r\n        }\r\n    }\r\n})\r\n\r\nconst Bobine = ({ id, value, index, moveBobine, width = 0, forInput = false, cortes, setArtigo }) => {\r\n    const classes = useStyles({ width });\r\n    const ref = useRef(null);\r\n    const color = cortes.find(v => v.item_lar == value);\r\n    const style = {\r\n        color: color.color,\r\n        fontStyle: \"italic\",\r\n        height: \"70%\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    };\r\n\r\n    const onClick = (item) =>{\r\n        console.log(index,item)\r\n        setArtigo(index,item);\r\n    }\r\n\r\n    const menu = (\r\n        <Menu onClick={onClick}>\r\n            {color.artigos.map(v => {\r\n                return (\r\n                    <Menu.Item key={v.of_id}>\r\n                        <div><b>{v.of_cod}</b> {v.artigo_cod}</div>\r\n                        <div>{v.artigo_des}</div>\r\n                        <div style={{ color: \"#1890ff\" }}>{v.cliente_nome}</div>\r\n                    </Menu.Item>\r\n                );\r\n            })}\r\n        </Menu>\r\n    );\r\n\r\n    const [{ handlerId }, drop] = useDrop({\r\n        accept: 'bobine',\r\n        collect(monitor) {\r\n            return {\r\n                handlerId: monitor.getHandlerId(),\r\n            };\r\n        },\r\n        drop(item, monitor) {\r\n            if (!ref.current) {\r\n                return;\r\n            }\r\n            const dragIndex = item.index;\r\n            const hoverIndex = index;\r\n            if (dragIndex === hoverIndex) {\r\n                return;\r\n            }\r\n            const hoverBoundingRect = ref.current?.getBoundingClientRect();\r\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n            const clientOffset = monitor.getClientOffset();\r\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n            moveBobine(dragIndex, hoverIndex);\r\n            item.index = hoverIndex;\r\n        }\r\n    });\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        type: 'bobine',\r\n\r\n        item: () => {\r\n            return { id, index };\r\n        },\r\n        canDrag(monitor) {\r\n            return forInput;\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    });\r\n    const opacity = isDragging ? 0 : 1;\r\n    drag(ref);\r\n    drop(ref);\r\n    return (\r\n        <div ref={ref} className={classes.bobine} style={{ opacity, background: color.bcolor, color: color.color }} data-handler-id={handlerId}>\r\n            <div style={{ fontSize: \"10px\", textAlign: \"center\", height: \"10%\" }}>{index + 1}</div>\r\n            <div style={style}>{value}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ({ record, setFormTitle, parentRef, closeParent, parentReload, wrapForm = \"form\", forInput = true }) => {\r\n    const [form] = Form.useForm();\r\n    const [loading, setLoading] = useState(true);\r\n    const [formStatus, setFormStatus] = useState({ error: [], warning: [], info: [], success: [] });\r\n    const [guides, setGuides] = useState(false);\r\n    const [bobines, setBobines] = useImmer([]);\r\n    const [larguraTotal, setLarguraTotal] = useState(0);\r\n\r\n\r\n    const init = () => {\r\n        const { cortes, cortesOrdem } = record;\r\n        (setFormTitle) && setFormTitle({ title: `Posicionar Cortes` });\r\n        const _bobines = [];\r\n        let _larguraTotal = 0;\r\n        if (!cortesOrdem) {\r\n            for (const v of cortes) {\r\n                _bobines.push(...(new Array(v.item_ncortes)).fill(v.item_lar));\r\n                _larguraTotal = _larguraTotal + parseInt(v.item_ncortes) * parseInt(v.item_lar);\r\n            }\r\n        } else {\r\n            const _cortesOrdem = JSON.parse(cortesOrdem.largura_ordem);\r\n            _bobines.push(..._cortesOrdem);\r\n            form.setFieldsValue({ designacao: cortesOrdem.designacao });\r\n            _larguraTotal = _cortesOrdem.reduce((sum, v) => Number(sum) + Number(v));\r\n        }\r\n\r\n        setBobines(_bobines);\r\n        setLarguraTotal(_larguraTotal);\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [record]);\r\n\r\n    const onFinish = async (values) => {\r\n        const status = { error: [], warning: [], info: [], success: [] };\r\n        const { cortes, ordem, cortes_id } = record;\r\n        let touched = false;\r\n        if (!ordem) {\r\n            touched = true;\r\n        } else {\r\n            if (!JSON.parse(ordem.largura_ordem).every((v, i) => v === bobines[i])) {\r\n                touched = true;\r\n            }\r\n        }\r\n        if (touched) {\r\n            const response = await fetchPost({ url: `${API_URL}/updatecortesordem/`, parameters: { ...values, largura_ordem: JSON.stringify(bobines), cortes_id } });\r\n            if (response.data.status !== \"error\") {\r\n                status.success.push({ message: response.data.title });\r\n                parentReload({}, \"lookup\");\r\n                closeParent();\r\n            } else {\r\n                status.error.push({ message: response.data.title });\r\n            }\r\n            setFormStatus(status);\r\n        }\r\n    }\r\n\r\n    const moveBobine = useCallback((dragIndex, hoverIndex) => {\r\n        setBobines(draft => {\r\n            const tmp = draft[hoverIndex];\r\n            draft[hoverIndex] = draft[dragIndex];\r\n            draft[dragIndex] = tmp;\r\n        });\r\n    }, [bobines]);\r\n\r\n    return (\r\n        <>\r\n            <AlertMessages formStatus={formStatus} />\r\n            <Form form={form} name={`fps`} onFinish={onFinish} component={wrapForm}>\r\n                <FormLayout\r\n                    id=\"LAY-CORTESORDEM-UPSERT\"\r\n                    guides={guides}\r\n                    layout=\"vertical\"\r\n                    style={{ width: \"100%\", padding: \"0px\"/* , minWidth: \"700px\" */ }}\r\n                    schema={schema}\r\n                    field={{\r\n                        forInput,\r\n                        wide: [16],\r\n                        margin: \"2px\", overflow: false, guides: guides,\r\n                        label: { enabled: true, pos: \"top\", align: \"start\", vAlign: \"center\", /* width: \"80px\", */ wrap: false, overflow: false, colon: true, ellipsis: true },\r\n                        alert: { pos: \"right\", tooltip: true, container: false /* container: \"el-external\" */ },\r\n                        layout: { top: \"\", right: \"\", center: \"\", bottom: \"\", left: \"\" },\r\n                        required: true,\r\n                        style: { alignSelf: \"top\" }\r\n                    }}\r\n                    fieldSet={{\r\n                        guides: guides,\r\n                        wide: 16, margin: \"2px\", layout: \"horizontal\", overflow: false\r\n                    }}\r\n                >\r\n                    {forInput && <>\r\n                        <FieldSet margin={false} field={{ wide: [6, 4] }}>\r\n                            <Field name=\"designacao\" label={{ enabled: false }}><Input placeholder=\"Designação\" size=\"small\" /></Field>\r\n                        </FieldSet>\r\n                        <VerticalSpace height=\"24px\" />\r\n                    </>\r\n                    }\r\n                </FormLayout>\r\n            </Form>\r\n\r\n            <DndProvider backend={HTML5Backend}>\r\n                <div style={{ display: \"flex\", flexDirection: \"row\",justifyContent:\"space-around\" }}>\r\n                    {bobines.map((v, i) => {\r\n                        return (<Bobine key={`b-${v}.${i}`} id={`b-${v}.${i}`} value={v} index={i} moveBobine={moveBobine} width={(v * 100) / larguraTotal} cortes={record.cortes} forInput={forInput} />);\r\n                    })}\r\n                </div>\r\n            </DndProvider>\r\n            {parentRef && <Portal elId={parentRef.current}>\r\n                <Space>\r\n                    <Button type=\"primary\" onClick={() => form.submit()}>Guardar</Button>\r\n                    <Button onClick={() => setGuides(!guides)}>{guides ? \"No Guides\" : \"Guides\"}</Button>\r\n                </Space>\r\n            </Portal>\r\n            }\r\n        </>\r\n    );\r\n}","import React, { useEffect, useState, useCallback, useRef, useContext } from 'react';\r\nimport { createUseStyles } from 'react-jss';\r\nimport styled from 'styled-components';\r\nimport dayjs from 'dayjs';\r\nimport Joi from 'joi';\r\nimport { fetch, fetchPost, cancelToken } from \"utils/fetch\";\r\nimport { API_URL } from \"config\";\r\nimport { WrapperForm, TitleForm, FormLayout, Field, FieldSet, Label, LabelField, FieldItem, AlertsContainer, Item, SelectField, InputAddon, VerticalSpace } from \"components/formLayout\";\r\nimport AlertMessages from \"components/alertMessages\";\r\nimport Toolbar from \"components/toolbar\";\r\nimport Portal from \"components/portal\";\r\nimport ResultMessage from 'components/resultMessage';\r\nimport { Button, Spin, Input, Form, InputNumber, Skeleton, Space } from \"antd\";\r\nimport { LoadingOutlined, EditOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { DATE_FORMAT, DATETIME_FORMAT } from 'config';\r\nimport FormCortesUpsert from './FormCortesUpsert';\r\nimport { useImmer } from \"use-immer\";\r\n/* import { OFabricoContext } from './FormOFabricoValidar'; */\r\n\r\nconst schema = (keys, excludeKeys) => {\r\n    return getSchema({}, keys, excludeKeys).unknown(true);\r\n}\r\n\r\nconst Drawer = ({ showWrapper, setShowWrapper, parentReload }) => {\r\n    const [formTitle, setFormTitle] = useState({});\r\n    const iref = useRef();\r\n    const { record = {} } = showWrapper;\r\n    const onVisible = () => {\r\n        setShowWrapper(prev => ({ ...prev, show: !prev.show }));\r\n    }\r\n    return (\r\n        <WrapperForm\r\n            title={<TitleForm title={formTitle.title} subTitle={formTitle.subTitle} />}\r\n            type=\"modal\"\r\n            mode=\"maximized\"\r\n            destroyOnClose={true}\r\n            mask={true}\r\n            setVisible={onVisible}\r\n            visible={showWrapper.show}\r\n            width={800}\r\n            bodyStyle={{ height: \"450px\" }}\r\n            footer={<div ref={iref} id=\"form-wrapper\" style={{ textAlign: 'right' }}></div>}\r\n        >\r\n            <FormCortesUpsert setFormTitle={setFormTitle} record={record} parentRef={iref} closeParent={onVisible} parentReload={parentReload} />\r\n        </WrapperForm>\r\n    );\r\n}\r\n\r\n\r\n/* const loadArtigosAggLookup = async ({ agg_id, token }) => {\r\n    const { data: { rows } } = await fetchPost({ url: `${API_URL}/artigostempagglookup/`, filter: { agg_id }, sort: [], cancelToken: token });\r\n    return rows;\r\n} */\r\n\r\nconst loadCortesOrdemLookup = async ({ cortes_id, token }) => {\r\n    const { data: { rows } } = await fetchPost({ url: `${API_URL}/cortesordemlookup/`, filter: { cortes_id }, sort: [{ column: 'versao', direction: 'DESC' }], cancelToken: token });\r\n    return rows;\r\n}\r\n\r\nconst colors = [\r\n    { bcolor: '#002766', color: '#ffffff' },\r\n    { bcolor: '#0050b3', color: '#ffffff' }, { bcolor: '#1890ff', color: '#000000' },\r\n    { bcolor: '#69c0ff', color: '#000000' }, { bcolor: '#bae7ff', color: '#000000' },\r\n    { bcolor: '#ffffff', color: '#000000' }\r\n];\r\n\r\nexport default ({ record, setFormTitle, parentRef, closeParent, parentReload, wrapForm = \"form\", forInput = true }) => {\r\n    const [form] = Form.useForm();\r\n    const [loading, setLoading] = useState(true);\r\n    const [resultMessage, setResultMessage] = useState({ status: \"none\" });\r\n    const [showForm, setShowForm] = useState({ show: false });\r\n    const [formStatus, setFormStatus] = useState({ error: [], warning: [], info: [], success: [] });\r\n    const [cortesOrdemLookup, setCortesOrdemLookup] = useState([]);\r\n    const [larguraUtil, setLarguraUtil] = useState();\r\n    const [changedValues, setChangedValues] = useState();\r\n    const [isTouched, setIsTouched] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const cancelFetch = cancelToken();\r\n        // loadData({ /* agg_id: ctx.agg_id, */ token: cancelFetch });\r\n        init({ /* agg_id: ctx.agg_id, */ token: cancelFetch });\r\n        return (() => cancelFetch.cancel(\"Form Cortes Cancelled\"));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (changedValues) {\r\n            if (\"cortes\" in changedValues) {\r\n                setLarguraUtil(calculateLarguraUtil({ larguras: form.getFieldValue(\"cortes\") }));\r\n            }\r\n            if (\"cortesordem_id\" in changedValues) {\r\n            }\r\n        }\r\n    }, [changedValues]);\r\n\r\n    const init = ({ token }) => {\r\n        if (!loading) {\r\n            setLoading(true);\r\n        }\r\n        (async () => {\r\n            const { cortes, cortesordem,ofs } = record;\r\n            const _cortesOrdemLookup = (forInput) ? await loadCortesOrdemLookup({ cortes_id: cortes.id, token }) : [{ ...cortesordem }];\r\n            const _larguras = JSON.parse(cortes.largura_json);\r\n            let _cortes = Object.keys(_larguras).map((key, i) => ({ item_lar: key, item_ncortes: _larguras[key], bcolor: colors[i].bcolor, color: colors[i].color,artigos:ofs.filter(v=>v.artigo_lar==key).map((item) =>({color:item.color,artigo_id:item.artigo_id,artigo_cod:item.artigo_cod,artigo_des:item.artigo_des,cliente_cod:item.cliente_cod,cliente_nome:item.cliente_nome,of_id:item.of_id,of_cod:item.of_cod}))}));\r\n            //Object.keys(_larguras).map((key, i) => ({ item_lar: key, item_ncortes: _larguras[key], bcolor: colors[i].bcolor, color: colors[i].color, artigos:[...new Map(ofs.filter(v=>v.artigo_lar==key).map((item) => [item[\"artigo_id\"], {artigo_id:item.artigo_id,artigo_cod:item.artigo_cod,artigo_des:item.artigo_des,cliente_cod:item.cliente_cod,cliente_nome:item.cliente_nome,of_id:item.of_id,of_cod:item.of_cod}])).values()] }));\r\n            form.setFieldsValue({ cortes: _cortes, cortes_id: cortes.id, cortesordem_id: cortesordem.id });\r\n            setLarguraUtil(calculateLarguraUtil({ larguras: JSON.parse(cortes.largura_json) }));\r\n            setCortesOrdemLookup(_cortesOrdemLookup);\r\n            setLoading(false);\r\n        })();\r\n    }\r\n\r\n    const loadData = ({ agg_id, cortes_id, token }, type = \"init\") => {\r\n        switch (type) {\r\n            case \"lookup\":\r\n                (async () => {\r\n                    const _cortes_id = (!cortes_id) ? form.getFieldValue(\"cortes_id\") : cortes_id;\r\n                    const _cortesOrdemLookup = await loadCortesOrdemLookup({ cortes_id: _cortes_id, token });\r\n                    setCortesOrdemLookup(_cortesOrdemLookup);\r\n                })();\r\n                break;\r\n            default:\r\n                if (!loading) {\r\n                    setLoading(true);\r\n                }\r\n                (async () => {\r\n                    // const _cortes = await loadArtigosAggLookup({ agg_id, token });\r\n                    // const cortes_id = (_cortes.length > 0) ? _cortes[0][\"cortes_id\"] : null;\r\n                    // const cortesordem_id = (_cortes.length > 0) ? _cortes[0][\"cortesordem_id\"] : null;\r\n                    // const _cortesOrdemLookup = await loadCortesOrdemLookup({ cortes_id, token });\r\n                    // form.setFieldsValue({ cortes: _cortes, ...(cortes_id ? { cortes_id } : { cortes_id: null }), ...(cortesordem_id ? { cortesordem_id } : { cortesordem_id: null }) });\r\n                    // setLarguraUtil(calculateLarguraUtil(_cortes));\r\n                    // setCortesOrdemLookup(_cortesOrdemLookup);\r\n                    setLoading(false);\r\n                })();\r\n        }\r\n    }\r\n\r\n\r\n    const onValuesChange = (changedValues, allValues) => {\r\n        setIsTouched(true);\r\n        setChangedValues(changedValues);\r\n    }\r\n\r\n    const cortesOrdem = () => {\r\n        const id = form.getFieldValue(\"cortesordem_id\");\r\n        return ((id) ? cortesOrdemLookup.filter(v => v.id === id) : [])[0];\r\n    };\r\n\r\n    const isCortesTouched = () => {\r\n        return !(!form.getFieldValue(\"cortes_id\") /* || (changedValues && \"cortes\" in changedValues) */);\r\n    }\r\n\r\n    const calculateLarguraUtil = useCallback(({ cortes, larguras }) => {\r\n        if (cortes) {\r\n            return cortes.reduce((accumulator, current) => accumulator + (current.cortes_artigo_ncortes * current.cortes_artigo_lar), 0);\r\n        } else {\r\n            if (Array.isArray(larguras)) {\r\n                return larguras.reduce((accumulator, current) => accumulator + (current.item_ncortes * current.item_lar), 0);\r\n            } else {\r\n                let v = 0;\r\n                for (let el in larguras) {\r\n                    v += (parseInt(larguras[el]) * parseInt(el));\r\n                }\r\n                return v;\r\n            }\r\n        }\r\n    });\r\n\r\n    const onFinish = async (values) => {\r\n        console.log(record);\r\n        const { cortes_id, cortesordem_id } = form.getFieldsValue(true);\r\n        const response = await fetchPost({ url: `${API_URL}/updatecurrentsettings/`, filter: { csid: record.id }, parameters: { type: 'cortes', cortes: { cortes_id, cortesordem_id } } });\r\n        setResultMessage(response.data);\r\n        if (response.data.status !== \"error\") {\r\n            throw 'TODO RELOAD PARENT'\r\n            //parentReload({ formulacao_id: record.formulacao.id }, \"init\");\r\n        }\r\n    }\r\n\r\n    const onSubmit = async () => {\r\n        const status = { error: [], warning: [], info: [], success: [] };\r\n        const response = await fetchPost({ url: `${API_URL}/newcortes/`, parameters: { ...form.getFieldsValue([\"cortes\"]) } });\r\n        if (response.data.status == \"error\") {\r\n            status.error.push({ message: response.data.title });\r\n        } else {\r\n            status.success.push({ message: response.data.title });\r\n            form.setFieldsValue({ cortes_id: response.data.id })\r\n            loadData({ cortes_id: response.data.id }, 'lookup');\r\n        }\r\n        setFormStatus(status);\r\n    }\r\n\r\n    const clearCortes = async () => {\r\n        setCortesOrdemLookup([]);\r\n        form.setFieldsValue({ cortes_id: null, cortesordem_id: null });\r\n        /*  const status = { error: [], warning: [], info: [], success: [] };\r\n         const response = await fetchPost({ url: `${API_URL}/clearcortes/`, parameters: { agg_id: ctx.agg_id } });\r\n         if (response.data.status == \"error\") {\r\n             status.error.push({ message: response.data.title });\r\n         } else {\r\n             status.success.push({ message: response.data.title });\r\n             loadData({ agg_id: ctx.agg_id });\r\n         }\r\n         setFormStatus(status); */\r\n    }\r\n\r\n    const onShowForm = (newForm = false) => {\r\n        if (newForm) {\r\n            setShowForm(prev => ({ ...prev, show: !prev.show, record: { ...form.getFieldsValue([\"cortes\", \"cortes_id\"]) } }));\r\n        } else {\r\n            setShowForm(prev => ({ ...prev, show: !prev.show, record: { ...form.getFieldsValue([\"cortes\", \"cortes_id\"]), cortesOrdem: cortesOrdem() } }));\r\n        }\r\n    }\r\n\r\n    const onClose = (reload = false) => {\r\n        closeParent();\r\n    }\r\n\r\n    const onSuccessOK = () => {\r\n        if (operation.key === \"insert\") {\r\n            form.resetFields();\r\n            init();\r\n            setResultMessage({ status: \"none\" });\r\n        }\r\n    }\r\n\r\n    const onErrorOK = () => {\r\n        setResultMessage({ status: \"none\" });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ResultMessage\r\n                result={resultMessage}\r\n                successButtonClose={<Button key=\"goto-close\" onClick={() => onClose(true)}>Fechar</Button>}\r\n                errorButtonOK={<Button type=\"primary\" key=\"goto-ok\" onClick={onErrorOK}>OK</Button>}\r\n                errorButtonClose={<Button key=\"goto-close\" onClick={onClose}>Fechar</Button>}\r\n            >\r\n                <AlertMessages formStatus={formStatus} />\r\n                <Spin spinning={loading} indicator={<LoadingOutlined style={{ fontSize: 24 }} spin />} tip=\"A carregar...\">\r\n                    <Drawer showWrapper={showForm} setShowWrapper={setShowForm} parentReload={loadData} />\r\n                    <Form form={form} name={`fps-c`} onFinish={onFinish} onValuesChange={onValuesChange}>\r\n                        <FormLayout\r\n                            id=\"LAY-CORTES\"\r\n                            layout=\"vertical\"\r\n                            style={{ width: \"100%\", padding: \"0px\"/* , minWidth: \"700px\" */ }}\r\n                            schema={schema}\r\n                            field={{\r\n                                //wide: [3, 2, 1, '*'],\r\n                                margin: \"2px\", overflow: false,\r\n                                label: { enabled: true, pos: \"top\", align: \"start\", vAlign: \"center\", /* width: \"80px\", */ wrap: false, overflow: false, colon: true, ellipsis: true },\r\n                                alert: { pos: \"right\", tooltip: true, container: true /* container: \"el-external\" */ },\r\n                                layout: { top: \"\", right: \"\", center: \"\", bottom: \"\", left: \"\" },\r\n                                addons: {}, //top|right|center|bottom|left\r\n                                required: true,\r\n                                style: { alignSelf: \"center\" }\r\n                            }}\r\n                            fieldSet={{\r\n                                wide: 16, margin: false, layout: \"horizontal\", overflow: false\r\n                            }}\r\n                        >\r\n\r\n                            <FieldSet>\r\n                                {form.getFieldValue(\"cortes_id\") && <Toolbar\r\n                                    style={{ width: \"100%\" }}\r\n                                    left={<div>{larguraUtil && <>Largura Útil [ <b>{larguraUtil}mm</b> ]</>}</div>}\r\n                                    right={forInput && <Button onClick={clearCortes}>Refazer Cortes</Button>}\r\n                                />\r\n                                }\r\n                            </FieldSet>\r\n                            {forInput && <><FieldSet>\r\n\r\n\r\n                                <FieldSet layout=\"vertical\" style={{ minWidth: \"200px\", maxWidth: \"200px\" }}>\r\n                                    <FieldSet style={{ fontWeight: 500 }} field={{ wide: [8, 8], noItemWrap: true, label: { enabled: false } }}>\r\n                                        <Field>Largura</Field>\r\n                                        <Field>Nº Cortes</Field>\r\n                                    </FieldSet>\r\n\r\n\r\n                                    <Form.List name=\"cortes\">\r\n\r\n                                        {(fields, { add, remove, move }) => {\r\n                                            return (\r\n                                                <>\r\n                                                    {fields.map((field, index) => (\r\n                                                        <FieldSet key={field.key} field={{ wide: [8, 8] }}>\r\n                                                            <Field forInput={false} name={[field.name, `item_lar`]} label={{ enabled: false }}><Input disabled={true} size=\"small\" /></Field>\r\n                                                            <Field forInput={!isCortesTouched()} name={[field.name, `item_ncortes`]} label={{ enabled: false }}><InputNumber size=\"small\" min={1} max={24} /></Field>\r\n                                                        </FieldSet>\r\n                                                    ))}\r\n                                                </>\r\n\r\n                                            )\r\n                                        }}\r\n\r\n                                    </Form.List>\r\n                                    <VerticalSpace height=\"12px\" />\r\n                                    <FieldSet><Button disabled={isCortesTouched()} type=\"dashed\" onClick={onSubmit} style={{ width: \"100%\" }}>Aplicar</Button></FieldSet>\r\n\r\n                                </FieldSet>\r\n                            </FieldSet>\r\n                                <VerticalSpace height=\"12px\" />\r\n                                <FieldSet>\r\n                                    {form.getFieldValue(\"cortes_id\") && <Toolbar\r\n                                        style={{ width: \"100%\" }}\r\n                                        left={\r\n                                            <FieldSet>\r\n                                                <Field name=\"cortesordem_id\" layout={{ center: \"align-self:center;\", right: \"align-self:center;\" }} label={{ enabled: false, text: \"Posição Cortes\", pos: \"left\" }} addons={{\r\n                                                    ...(form.getFieldValue(\"cortesordem_id\") && { right: <Button onClick={() => onShowForm()} style={{ marginLeft: \"3px\" }} size=\"small\"><EditOutlined style={{ fontSize: \"16px\" }} /></Button> })\r\n                                                }}>\r\n                                                    <SelectField size=\"small\" data={cortesOrdemLookup} keyField=\"id\" textField=\"designacao\"\r\n                                                        optionsRender={(d, keyField, textField) => ({ label: <div><div style={{ display: \"flex\" }}><div style={{ minWidth: \"150px\" }}><b>{d[textField]}</b></div><div>v.{d[\"versao\"]}</div></div><div style={{ color: \"#1890ff\" }}>{d[\"largura_ordem\"].replaceAll('\"', ' ')}</div></div>, value: d[keyField] })}\r\n                                                    />\r\n                                                </Field>\r\n                                            </FieldSet>\r\n                                        }\r\n                                        right={<Button onClick={() => onShowForm(true)}>Novo Posicionamento de Cortes</Button>}\r\n                                    />\r\n                                    }\r\n                                </FieldSet>\r\n                            </>\r\n                            }\r\n                            <FieldSet field={{ wide: [16] }}>\r\n                                <FieldItem label={{ enabled: false }}>\r\n                                    {((loading, cortesOrdem) => {\r\n                                        if (!loading && cortesOrdem) {\r\n                                            return (<FormCortesUpsert record={{ ...form.getFieldsValue([\"cortes\", \"cortes_id\"]), cortesOrdem }} wrapForm={false} forInput={false} parentReload={loadData} />);\r\n                                        }\r\n                                    })(loading, cortesOrdem())}\r\n                                </FieldItem>\r\n                            </FieldSet>\r\n                        </FormLayout>\r\n                    </Form>\r\n                    {parentRef && <Portal elId={parentRef.current}>\r\n                        <Space>\r\n                            {isTouched && <Button type=\"primary\" onClick={() => onFinish(form.getFieldsValue(true))}>Guardar</Button>}\r\n                            <Button onClick={onClose}>Fechar</Button>\r\n                        </Space>\r\n                    </Portal>\r\n                    }\r\n                </Spin>\r\n            </ResultMessage>\r\n        </>\r\n    );\r\n}"],"names":["schema","keys","excludeKeys","getSchema","unknown","useStyles","createUseStyles","bobine","cursor","border","height","boxShadow","margin","borderRadius","width","props","backgroundColor","Bobine","id","value","index","moveBobine","forInput","cortes","setArtigo","classes","ref","useRef","color","find","v","item_lar","style","fontStyle","display","justifyContent","alignItems","artigos","map","key","of_id","of_cod","artigo_cod","artigo_des","cliente_nome","useDrop","accept","collect","monitor","handlerId","getHandlerId","drop","item","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","bottom","top","getClientOffset","y","useDrag","type","canDrag","isDragging","opacity","drag","className","background","bcolor","fontSize","textAlign","record","setFormTitle","parentRef","closeParent","parentReload","wrapForm","form","Form","useState","error","warning","info","success","formStatus","setFormStatus","guides","setGuides","useImmer","bobines","setBobines","larguraTotal","setLarguraTotal","init","cortesOrdem","title","_bobines","_larguraTotal","_cortesOrdem","JSON","parse","largura_ordem","push","setFieldsValue","designacao","reduce","sum","Number","Array","item_ncortes","fill","parseInt","useEffect","onFinish","values","status","ordem","cortes_id","touched","every","i","fetchPost","url","API_URL","parameters","stringify","response","data","message","useCallback","draft","tmp","name","component","layout","padding","field","wide","overflow","label","enabled","pos","align","vAlign","wrap","colon","ellipsis","alert","tooltip","container","right","center","left","required","alignSelf","fieldSet","placeholder","size","DndProvider","backend","HTML5Backend","flexDirection","elId","onClick","submit","Drawer","showWrapper","setShowWrapper","formTitle","iref","onVisible","prev","show","subTitle","mode","destroyOnClose","mask","setVisible","visible","bodyStyle","footer","FormCortesUpsert","loadCortesOrdemLookup","token","filter","sort","column","direction","cancelToken","rows","colors","loading","setLoading","resultMessage","setResultMessage","showForm","setShowForm","cortesOrdemLookup","setCortesOrdemLookup","larguraUtil","setLarguraUtil","changedValues","setChangedValues","isTouched","setIsTouched","cancelFetch","cancel","calculateLarguraUtil","larguras","getFieldValue","cortesordem","ofs","_cortesOrdemLookup","_larguras","largura_json","_cortes","Object","artigo_lar","artigo_id","cliente_cod","cortesordem_id","loadData","agg_id","_cortes_id","isCortesTouched","accumulator","cortes_artigo_ncortes","cortes_artigo_lar","isArray","el","getFieldsValue","csid","onSubmit","clearCortes","onShowForm","newForm","onClose","result","successButtonClose","errorButtonOK","errorButtonClose","spinning","indicator","LoadingOutlined","spin","tip","onValuesChange","allValues","addons","minWidth","maxWidth","fontWeight","noItemWrap","fields","add","remove","move","disabled","min","max","text","marginLeft","EditOutlined","keyField","textField","optionsRender","d","replaceAll"],"sourceRoot":""}