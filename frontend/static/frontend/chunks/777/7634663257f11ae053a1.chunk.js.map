{"version":3,"file":"chunks/777/7634663257f11ae053a1.chunk.js","mappings":"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","sources":["webpack://sgp/./src/pages/planeamento/agg/FormAggUpsert.jsx","webpack://sgp/./src/pages/planeamento/ordemFabrico/FormAgg.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef, useContext } from 'react';\r\nimport { createUseStyles } from 'react-jss';\r\nimport styled from 'styled-components';\r\nimport dayjs from 'dayjs';\r\nimport Joi from 'joi';\r\nimport { fetch, fetchPost } from \"utils/fetch\";\r\nimport { API_URL } from \"config\";\r\nimport { getSchema } from \"utils/schemaValidator\";\r\nimport { FormLayout, Field, FieldSet, FieldItem, AlertsContainer, Item, SelectField, CheckboxField, HorizontalRule, VerticalSpace, InputAddon } from \"components/formLayout\";\r\nimport AlertMessages from \"components/alertMessages\";\r\nimport IconButton from \"components/iconButton\";\r\nimport ResultMessage from 'components/resultMessage';\r\nimport Portal from \"components/portal\";\r\nimport { Input, Space, Form, Button, InputNumber, DatePicker } from \"antd\";\r\nimport { DATE_FORMAT, DATETIME_FORMAT } from 'config';\r\nimport { OFabricoContext } from '../ordemFabrico/FormOFabricoValidar';\r\n\r\nconst schema = (keys, excludeKeys) => {\r\n    return getSchema({}, keys, excludeKeys).unknown(true);\r\n}\r\n\r\nconst setId = (id) => {\r\n    if (id) {\r\n        return { key: \"update\", values: { id } };\r\n    }\r\n    return { key: \"insert\", values: {} };\r\n}\r\n\r\nconst loadAggsLookup = async ({ produto_id, agg_id }) => {\r\n    const { data: { rows } } = await fetchPost({ url: `${API_URL}/tempaggofabricolookup/`, filter: { status: 0, produto_id, agg_id }, parameters: { group: false }, sort: [] });\r\n    return rows;\r\n}\r\n\r\nexport default ({ setFormTitle, parentRef, closeParent, parentReload, wrapForm = \"form\", forInput = true }) => {\r\n    const ctx = useContext(OFabricoContext);\r\n    const [form] = Form.useForm();\r\n    const [loading, setLoading] = useState(true);\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const [changedValues, setChangedValues] = useState({});\r\n    const [formStatus, setFormStatus] = useState({ error: [], warning: [], info: [], success: [] });\r\n    const [guides, setGuides] = useState(false);\r\n    const [operation, setOperation] = useState(setId(ctx.agg_id));\r\n    const [resultMessage, setResultMessage] = useState({ status: \"none\" });\r\n\r\n    const init = () => {\r\n        const { produto_id, produto_cod, of_cod, agg_id } = ctx;\r\n        (async () => {\r\n            const aggsLookup = await loadAggsLookup({ produto_id, agg_id });\r\n            (setFormTitle) && setFormTitle({ title: `Agrupar Ordens Fabrico` });\r\n            const aggs = aggsLookup.filter(v => (v.id == agg_id || v.agg_ofid_original == v.id)).map(v => {\r\n                return ({\r\n                    checked: (agg_id === v.id ? 1 : 0),\r\n                    tempof_id: v.tempof_id,\r\n                    of_id: v.of_id,\r\n                    artigo_cod: v.item_cod,\r\n                    cliente_nome: v.cliente_nome,\r\n                    iorder: v.iorder,\r\n                    item_nome: v.item_nome,\r\n                    enabled: (of_cod == v.of_id ? false : true)\r\n                });\r\n            });\r\n            form.setFieldsValue({ aggs });\r\n            setLoading(false);\r\n        })();\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n        return (() => { });\r\n    }, []);\r\n\r\n    const onValuesChange = (changedValues) => {\r\n        setChangedValues(changedValues);\r\n    }\r\n\r\n    const onFinish = async (values) => {\r\n        const response = await fetchPost({ url: `${API_URL}/savetempagg/`, parameters: { ...values, agg_id: ctx.agg_id } });\r\n        if (response.data.status !== \"error\") {\r\n            parentReload({ agg_id: ctx.agg_id }, \"init\");\r\n            setSubmitting(false);\r\n            closeParent();\r\n        } else {\r\n            setSubmitting(false);\r\n            setResultMessage(response.data);\r\n        }\r\n    }\r\n\r\n    const onSuccessOK = () => {\r\n        if (operation.key === \"insert\") {\r\n            setSubmitting(false);\r\n            form.resetFields();\r\n            init();\r\n            setResultMessage({ status: \"none\" });\r\n        }\r\n    }\r\n\r\n    const onErrorOK = () => {\r\n        setSubmitting(false);\r\n        setResultMessage({ status: \"none\" });\r\n    }\r\n\r\n    const onClose = (reload = false) => {\r\n        closeParent();\r\n    }\r\n    \r\n    const onSubmit = useCallback(() =>{\r\n        setSubmitting(true);\r\n        form.submit();\r\n    },[]);\r\n\r\n    return (\r\n        <>\r\n            <ResultMessage\r\n                result={resultMessage}\r\n                successButtonOK={operation.key === \"insert\" && <Button type=\"primary\" key=\"goto-of\" onClick={onSuccessOK}>xxxx</Button>}\r\n                successButtonClose={<Button key=\"goto-close\" onClick={() => onClose(true)}>Fechar</Button>}\r\n                errorButtonOK={<Button type=\"primary\" key=\"goto-ok\" onClick={onErrorOK}>OK</Button>}\r\n                errorButtonClose={<Button key=\"goto-close\" onClick={onClose}>Fechar</Button>}\r\n            >\r\n                <AlertsContainer id=\"el-external\" />\r\n                <AlertMessages formStatus={formStatus} />\r\n                <Form form={form} name={`fps`} onFinish={onFinish} onValuesChange={onValuesChange} component={wrapForm}>\r\n                    <FormLayout\r\n                        id=\"LAY-AGG-UPSERT\"\r\n                        guides={guides}\r\n                        layout=\"vertical\"\r\n                        style={{ width: \"100%\", padding: \"0px\"/* , minWidth: \"700px\" */ }}\r\n                        schema={schema}\r\n                        field={{\r\n                            forInput,\r\n                            wide: [16],\r\n                            margin: \"2px\", overflow: false, guides: guides,\r\n                            label: { enabled: true, pos: \"top\" /* pos: (forInput ? \"top\" : \"left\"), align: (forInput ? \"start\" : \"end\"), vAlign: \"center\", width: \"140px\" */, wrap: false, overflow: false, colon: true, ellipsis: true },\r\n                            alert: { pos: \"right\", tooltip: true, container: false /* container: \"el-external\" */ },\r\n                            layout: { top: \"\", right: \"\", center: \"\", bottom: \"\", left: \"\" },\r\n                            required: true,\r\n                            style: { alignSelf: \"center\" }\r\n                        }}\r\n                        fieldSet={{\r\n                            guides: guides,\r\n                            wide: 16, margin: false, layout: \"horizontal\", overflow: false\r\n                        }}\r\n                    >\r\n                        <Form.List name=\"aggs\">\r\n                            {(fields, { }) => {\r\n                                return (\r\n                                    <FieldSet layout=\"vertical\" margin={false}>\r\n                                        {fields.map((field, index) => (\r\n                                            <FieldSet key={field.key} field={{ wide: [1] }} margin=\"0px 0px 3px 0px\" padding=\"5px\" style={{ border: \"solid 1px #d9d9d9\", borderRadius: \"3px\" }}>\r\n                                                <Field forInput={true} name={[field.name, `checked`]} label={{ enabled: false }}><CheckboxField disabled={form.getFieldValue([\"aggs\", field.name, \"enabled\"]) ? false : true} /></Field>\r\n                                                <FieldSet margin={false} wide={15} layout=\"vertical\">\r\n                                                    <FieldSet field={{ wide: [5, 5, 6], forViewBorder: false }} margin={false} wide={16} style={{ fontWeight: 700 }}>\r\n                                                        <Field forInput={false} name={[field.name, `of_id`]} label={{ enabled: false }}><Input disabled={true} size=\"small\" /></Field>\r\n                                                        <Field forInput={false} name={[field.name, `iorder`]} label={{ enabled: false }}><Input disabled={true} size=\"small\" /></Field>\r\n                                                        <Field forInput={false} name={[field.name, `artigo_cod`]} label={{ enabled: false }}><Input disabled={true} size=\"small\" /></Field>\r\n                                                    </FieldSet>\r\n                                                    <FieldSet field={{ wide: [7, 9], forViewBorder: false }} margin={false} wide={16}>\r\n                                                        <Field forInput={false} name={[field.name, `cliente_nome`]} label={{ enabled: false }}><Input disabled={true} size=\"small\" /></Field>\r\n                                                        <Field forInput={false} name={[field.name, `item_nome`]} label={{ enabled: false }}><Input disabled={true} size=\"small\" /></Field>\r\n                                                    </FieldSet>\r\n                                                </FieldSet>\r\n                                            </FieldSet>\r\n                                        ))}\r\n                                    </FieldSet>\r\n                                )\r\n                            }}\r\n                        </Form.List>\r\n                    </FormLayout>\r\n                </Form>\r\n                {parentRef && <Portal elId={parentRef.current}>\r\n                    <Space>\r\n                        <Button disabled={submitting} type=\"primary\" onClick={onSubmit}>Guardar</Button>\r\n                        {/* <Button onClick={() => setGuides(!guides)}>{guides ? \"No Guides\" : \"Guides\"}</Button> */}\r\n                    </Space>\r\n                </Portal>\r\n                }\r\n            </ResultMessage>\r\n        </>\r\n    );\r\n}","import React, { useEffect, useState, useCallback, useRef, Suspense, useContext } from 'react';\r\nimport { createUseStyles } from 'react-jss';\r\nimport styled from 'styled-components';\r\nimport dayjs from 'dayjs';\r\nimport Joi from 'joi';\r\nimport { fetch, fetchPost, cancelToken } from \"utils/fetch\";\r\nimport { API_URL } from \"config\";\r\nimport { WrapperForm, TitleForm, FormLayout, Field, FieldSet, Label, LabelField, FieldItem, AlertsContainer, Item, SelectField, InputAddon, SelectDebounceField } from \"components/formLayout\";\r\nimport Toolbar from \"components/toolbar\";\r\nimport YScroll from \"components/YScroll\";\r\nimport { Button, Spin, Tag, List, Typography, Form, InputNumber, Input, Card, Collapse } from \"antd\";\r\nconst { Panel } = Collapse;\r\nimport { LoadingOutlined, EditOutlined, PlusOutlined, EllipsisOutlined, SettingOutlined, PaperClipOutlined } from '@ant-design/icons';\r\nimport { DATE_FORMAT, DATETIME_FORMAT, THICKNESS } from 'config';\r\nimport FormAggUpsert from '../agg/FormAggUpsert';\r\nconst FormPaletesStockUpsert = React.lazy(() => import('../paletesStock/FormPaletesStockUpsert'));\r\nconst FormPaletizacao = React.lazy(() => import('./FormPaletizacao'));\r\nconst FormSettings = React.lazy(() => import('./FormSettings'));\r\nconst FormAttachments = React.lazy(() => import('./FormAttachments'));\r\nimport { remove } from 'ramda';\r\nimport { MdProductionQuantityLimits } from 'react-icons/md';\r\nimport { FaPallet, FaWarehouse, FaTape } from 'react-icons/fa';\r\n\r\nimport { OFabricoContext } from '../ordemFabrico/FormOFabricoValidar';\r\nimport SvgSchema from '../paletizacaoSchema/SvgSchema';\r\n\r\nconst StyledCard = styled(Card)`\r\n    .ant-card-body{\r\n        height:250px;\r\n        max-height:400px; \r\n        overflow-y:hidden;\r\n    }\r\n\r\n`;\r\n\r\nconst StyledCollapse = styled(Collapse)`\r\n\r\n    .ant-collapse-header{\r\n        background-color:#f5f5f5;\r\n        border-radius: 2px!important;\r\n        padding:1px 1px!important;\r\n    }\r\n    .ant-collapse-content > .ant-collapse-content-box{\r\n        padding:15px 15px!important;\r\n    }\r\n\r\n`;\r\n\r\n\r\n\r\nconst Drawer = ({ showWrapper, setShowWrapper, parentReload }) => {\r\n    const [formTitle, setFormTitle] = useState({});\r\n    const iref = useRef();\r\n    const { record = {} } = showWrapper;\r\n    const onVisible = () => {\r\n        setShowWrapper(prev => ({ ...prev, show: !prev.show }));\r\n    }\r\n    return (\r\n        <WrapperForm\r\n            title={<TitleForm title={formTitle.title} subTitle={formTitle.subTitle} />}\r\n            type={showWrapper.mode}\r\n            destroyOnClose={true}\r\n            width={800}\r\n            mask={true}\r\n            /* style={{ maginTop: \"48px\" }} */\r\n            setVisible={onVisible}\r\n            visible={showWrapper.show}\r\n            bodyStyle={{ height: \"450px\" /*  paddingBottom: 80 *//* , overflowY: \"auto\", minHeight: \"350px\", maxHeight: \"calc(100vh - 50px)\" */ }}\r\n            footer={<div ref={iref} id=\"form-wrapper\" style={{ textAlign: 'right' }}></div>}\r\n        >\r\n            <YScroll>\r\n                {!showWrapper.type && <FormAggUpsert setFormTitle={setFormTitle} /* record={record} */ parentRef={iref} closeParent={onVisible} parentReload={parentReload} />}\r\n                {showWrapper.type === \"paletes_stock\" && <Suspense fallback={<></>}><FormPaletesStockUpsert setFormTitle={setFormTitle} record={record} parentRef={iref} closeParent={onVisible} parentReload={parentReload} /></Suspense>}\r\n                {showWrapper.type === \"schema\" && <Suspense fallback={<></>}><FormPaletizacao setFormTitle={setFormTitle} record={record} parentRef={iref} closeParent={onVisible} parentReload={parentReload} /></Suspense>}\r\n                {showWrapper.type === \"settings\" && <Suspense fallback={<></>}><FormSettings setFormTitle={setFormTitle} record={record} parentRef={iref} closeParent={onVisible} parentReload={parentReload} /></Suspense>}\r\n                {showWrapper.type === \"attachments\" && <Suspense fallback={<></>}><FormAttachments setFormTitle={setFormTitle} record={record} parentRef={iref} closeParent={onVisible} parentReload={parentReload} /></Suspense>}\r\n            </YScroll>\r\n        </WrapperForm>\r\n    );\r\n}\r\n\r\nconst loadAggsLookup = async (produto_id, token) => {\r\n    const { data: { rows } } = await fetchPost({ url: `${API_URL}/tempaggofabricolookup/`, filter: { status: 6, produto_id }, sort: [], cancelToken: token });\r\n    return rows;\r\n}\r\n\r\nconst loadPaletesGet = async (tempof_id) => {\r\n    const { data: { rows } } = await fetchPost({ url: `${API_URL}/paletesstockget/`, parameters: {}, pagination: { enabled: false }, filter: { of_id: tempof_id }, sort: [] });\r\n    return rows;\r\n}\r\n\r\nconst PaletesStock = ({ item }) => {\r\n    return (\r\n        <div style={{ display: \"flex\", flexWrap: \"wrap\", flexDirection: \"row-reverse\" }}>\r\n            {item.paletesstock && item.paletesstock.map((v, idx) => { return <div style={{ flex: \"1 1 80px\" }} key={`ps-${item.tempof_id}-${idx}`}>{v}</div> })}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CardAgg = ({ aggItem, setShowForm, /* aggItem */ of_id }) => {\r\n    const paletes = JSON.parse(aggItem?.n_paletes);\r\n\r\n    const onAction = (op) => {\r\n        switch (op) {\r\n            case 'paletes_stock':\r\n                setShowForm(prev => ({ ...prev, type: op, mode: \"drawer\", show: !prev.show, record: { /* aggItem, */ aggItem, of_id } }));\r\n                break;\r\n            case 'schema':\r\n                setShowForm(prev => ({ ...prev, type: op, mode: \"drawer\", show: !prev.show, record: { /* aggItem, */ aggItem, of_id } }));\r\n                break;\r\n            case 'settings':\r\n                console.log(\"sssss\",aggItem,of_id)\r\n                setShowForm(prev => ({ ...prev, type: op, mode: \"drawer\", show: !prev.show, record: { /* aggItem, */ aggItem, of_id } }));\r\n                break;\r\n            case 'attachments':\r\n                setShowForm(prev => ({ ...prev, type: op, mode: \"drawer\", show: !prev.show, record: { /* aggItem, */ aggItem, of_id } }));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <List.Item>\r\n            <StyledCard hoverable\r\n                style={{ width: '100%'/* , height:\"300px\", maxHeight:\"400px\", overflowY:\"auto\" */ }}\r\n                headStyle={{ backgroundColor: \"#002766\", color: \"#fff\" }}\r\n                title={<div>\r\n                    <div style={{ fontWeight: 700, fontSize: \"14px\" }}>{aggItem.of_id}</div>\r\n                    <div style={{ color: \"#fff\", fontSize: \".7rem\" }}>{aggItem.item_cod} - {aggItem.cliente_nome}</div>\r\n                </div>} size=\"small\"\r\n                actions={[\r\n                    <div key=\"settings\" onClick={() => onAction('settings')} title=\"Outras definições\">Definições</div>,\r\n                    /* <FaPallet key=\"schema\" onClick={() => onAction('schema')} title=\"Paletização (Esquema)\" />, */\r\n                    /* <FaWarehouse key=\"paletes\" onClick={() => onAction('paletes_stock')} title=\"Paletes em Stock\" />, */\r\n                    <div key=\"schema\" onClick={() => onAction('schema')} title=\"Paletização (Esquema)\">Paletização</div>,\r\n                    <div key=\"paletes\" onClick={() => onAction('paletes_stock')}>Stock</div>,\r\n                    <div key=\"attachments\" onClick={() => onAction('attachments')}><span><PaperClipOutlined />Anexos</span></div>\r\n                    /* <div key=\"quantity\" onClick={() => onAction('quantity')} title=\"Quantidades\">Quantidades</div> */\r\n                    /*<SettingOutlined key=\"settings\" onClick={() => onAction('settings')} title=\"Outras definições\" />,*/\r\n                    /*<MdProductionQuantityLimits key=\"quantity\" onClick={() => onAction('quantity')} title=\"Quantidades\" />*/\r\n                    /*                     <EditOutlined key=\"edit\" />,\r\n                                        <EllipsisOutlined key=\"ellipsis\" />, */\r\n                ]}\r\n            >\r\n                <YScroll>\r\n                    <FieldSet wide={16} margin={false} layout=\"vertical\">\r\n                        <StyledCollapse defaultActiveKey={['1']} expandIconPosition=\"right\" bordered>\r\n                            <Panel header={<div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", width: \"80%\" }}><div><b>Encomenda</b></div><div>{aggItem.qty_encomenda} m&#178;</div></div>} key=\"1\">\r\n                                <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}><div>{aggItem.linear_meters.toFixed(2)}</div><div>m/bobine</div></div>\r\n                                <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}><div>{aggItem.sqm_bobine.toFixed(2)}</div><div>m&#178;/bobine</div></div>\r\n                                <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}><div>{(aggItem.qty_encomenda / aggItem.sqm_bobine).toFixed(2)}</div><div>bobines</div></div>\r\n                                {paletes?.items && <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}><div>{paletes.total.n_paletes.toFixed(2)}</div><div>paletes</div></div>}\r\n                                {paletes?.items && <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}><div>{paletes.total.sqm_contentor.toFixed(2)}</div><div>m&#178;/contentor</div></div>}\r\n                                {paletes?.items && <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}><div>{(aggItem.qty_encomenda / paletes.total.sqm_contentor).toFixed(2)}</div><div>contentores</div></div>}\r\n                            </Panel>\r\n                            <Panel header={<div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", width: \"80%\" }}><div><b>Paletização</b></div></div>} key=\"2\">\r\n                                {paletes?.items && paletes.items.map((v, idx) => {\r\n                                    return (\r\n                                        <div style={{ borderBottom: \"20px\" }} key={`pc-${aggItem.name}-${v.id}`}>\r\n                                            <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", borderBottom: \"solid 1px #d9d9d9\" }}><div><b>Palete</b> {idx + 1}</div><div><b>Bobines</b> {v.num_bobines}</div></div>\r\n                                            <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}><div style={{ color: \"#595959\" }}>m&#178;</div><div>{v.sqm_palete.toFixed(2)}</div></div>\r\n                                            <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}><div style={{ color: \"#595959\" }}>Nº Paletes</div><div>{(paletes.total.n_paletes / paletes.items.length).toFixed(2)}</div></div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                                <SvgSchema items={aggItem} width=\"100%\" height=\"100%\" />\r\n                            </Panel>\r\n                            {aggItem?.paletesstock?.length && <Panel header={<div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", width: \"80%\" }}><div><b>{aggItem?.paletesstock?.length} Paletes de Stock</b></div></div>} key=\"3\">\r\n                                <div style={{ height: \"150px\", overflowY: \"hidden\" }}>\r\n                                    <YScroll>\r\n                                        <PaletesStock item={aggItem} />\r\n                                    </YScroll>\r\n                                </div>\r\n                            </Panel>\r\n                            }\r\n                        </StyledCollapse>\r\n\r\n                    </FieldSet>\r\n                </YScroll>\r\n\r\n\r\n            </StyledCard>\r\n        </List.Item>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default ({ /* changedValues */ }) => {\r\n    const { form, guides, schema, ...ctx } = useContext(OFabricoContext);\r\n    //temp_ofabrico_agg, item_id, form, guides, schema\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [showForm, setShowForm] = useState({ show: false, type: null });\r\n    const [aggs, setAggs] = useState([]);\r\n    const [aggId, setAggId] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        /*         console.log(\"FORM-AGG->\", ctx) */\r\n        const cancelFetch = cancelToken();\r\n        loadData({ agg_id: ctx.agg_id, token: cancelFetch });\r\n        return (() => cancelFetch.cancel(\"Form Agg Cancelled\"));\r\n    }, []);\r\n\r\n    /*     useEffect(() => {\r\n            const cancelFetch = cancelToken();\r\n            if (changedValues) {\r\n                console.log(\"CHANGED\",changedValues)\r\n                if (\"agg_id\" in changedValues) {\r\n                    setLoading(true);\r\n                    loadData({ agg_id: changedValues.agg_id, token: cancelFetch });\r\n                }\r\n            }\r\n            return (() => cancelFetch.cancel(\"Form Agg Cancelled\"));\r\n        }, [changedValues]); */\r\n\r\n    const loadData = (data = {}, type = \"init\") => {\r\n        const { agg_id, token } = data;\r\n        switch (type) {\r\n            case \"lookup\":\r\n                setLoading(true);\r\n                (async () => {\r\n                    setAggs(await loadAggsLookup(ctx.produto_id, token));\r\n                    setLoading(false);\r\n                })();\r\n                break;\r\n            default:\r\n                if (!loading) {\r\n                    setLoading(true);\r\n                }\r\n                (async () => {\r\n                    let _aggs = await loadAggsLookup(ctx.produto_id, token);\r\n                    setAggs(_aggs);\r\n                    console.log(\"LOAD-DATA-AGG\",agg_id)\r\n                    if (agg_id && _aggs[0]?.v) {\r\n                        //const { id, group_id, group_ofid, group_item_cod, group_qty_item } = _aggs[0].v.filter(v => v.id == agg_of_id)[0];\r\n                        const ret = _aggs[0].v.filter(v => v.id == agg_id);\r\n                        //setAggId({ id, group_id: group_id.split(','), group_ofid: group_ofid.split(','), group_item_cod: group_item_cod.split(','), group_qty_item: group_qty_item.split(',') });\r\n                        console.log(\"CHANGED\", _aggs[0].v.filter(v => v.id == agg_id))\r\n                        setAggId(_aggs[0].v.filter(v => v.id == agg_id));\r\n                        //console.log(\"xxxxxxxxxxxxxxxxxxxxxxxxxxx\", { id, group_id: group_id.split(','), group_ofid: group_ofid.split(','), group_item_cod: group_item_cod.split(','), group_qty_item: group_qty_item.split(',') });\r\n                        //form.setFieldsValue({ thikness: THICKNESS });\r\n                        // let [artigoSpecs] = _artigosspecs.filter(v => v.id === artigospecs_id);\r\n                        // const artigoSpecsItems = await getArtigoSpecsItems({ artigospecs_id });\r\n                        // const fieldsValue = { nitems: artigoSpecsItems.length };\r\n                        // for (let [i, v] of artigoSpecsItems.entries()) {\r\n                        //     fieldsValue[`key-${i}`] = v.item_key;\r\n                        //     fieldsValue[`des-${i}`] = v.item_des;\r\n                        //     const vals = (typeof v.item_values === \"string\") ? JSON.parse(v.item_values) : v.item_values;\r\n                        //     for (let [iV, vV] of vals.entries()) {\r\n                        //         fieldsValue[`v${v.item_key}-${iV}`] = vV;\r\n                        //     }\r\n                        // }\r\n                        // artigoSpecs = { ...artigoSpecs, cliente_cod: { key: artigoSpecs.cliente_cod, value: artigoSpecs.cliente_cod, label: artigoSpecs.cliente_nome } };\r\n                        // form.setFieldsValue({ artigoSpecs, artigoSpecsItems: fieldsValue });\r\n                    }\r\n                    setLoading(false);\r\n                })();\r\n        }\r\n    }\r\n\r\n    const onShowForm = (/* newForm = false */) => {\r\n        /* const { produto_id, produto_cod, ofabrico, temp_ofabrico_agg, temp_ofabrico } = ctx; */\r\n        /* if (newForm) { */\r\n        setShowForm(prev => ({ ...prev, type: null, show: !prev.show, /* record: { produto_id, produto_cod, ofabrico, temp_ofabrico_agg, temp_ofabrico } */ }));\r\n        /* } else { */\r\n        //setShowForm(prev => ({ ...prev, show: !prev.show, record: { ...form.getFieldsValue(true) } }));\r\n        /* } */\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Spin spinning={loading} indicator={<LoadingOutlined style={{ fontSize: 24 }} spin />} tip=\"A carregar...\">\r\n                <Drawer showWrapper={showForm} setShowWrapper={setShowForm} parentReload={loadData} />\r\n                <FormLayout\r\n                    id=\"LAY-AGGS\"\r\n                    guides={guides}\r\n                    layout=\"vertical\"\r\n                    style={{ width: \"100%\", padding: \"0px\"/* , minWidth: \"700px\" */ }}\r\n                    schema={schema}\r\n                    field={{\r\n                        //wide: [3, 2, 1, '*'],\r\n                        margin: \"2px\", overflow: false, guides: guides,\r\n                        label: { enabled: true, pos: \"top\", align: \"start\", vAlign: \"center\", width: \"180px\", wrap: false, overflow: false, colon: true, ellipsis: true },\r\n                        alert: { pos: \"right\", tooltip: true, container: true /* container: \"el-external\" */ },\r\n                        layout: { top: \"\", right: \"\", center: \"\", bottom: \"\", left: \"\" },\r\n                        addons: {}, //top|right|center|bottom|left\r\n                        required: true,\r\n                        style: { alignSelf: \"top\" }\r\n                    }}\r\n                    fieldSet={{\r\n                        guides: guides,\r\n                        wide: 16, margin: \"2px\", layout: \"horizontal\", overflow: false\r\n                    }}\r\n                >\r\n                    <FieldSet margin={false}>\r\n                        <Toolbar\r\n                            style={{ width: \"100%\" }}\r\n                            /* left={<FieldSet>\r\n                                <Field name=\"thikness\" wide={11} layout={{ center: \"align-self:center;\", right: \"align-self:center;\" }} label={{ enabled: true, width: \"100px\", text: \"Espessura\", pos: \"left\" }}>\r\n                                    <SelectField size=\"small\" data={THICKNESS} keyField=\"t\" textField=\"t\"\r\n                                        optionsRender={(d, keyField, textField) => ({ label: <div style={{ display: \"flex\" }}><div style={{ minWidth: \"100px\" }}><b>{d[textField]} &#x00B5;</b></div></div>, value: d[keyField] })}\r\n                                    />\r\n                                </Field>\r\n                            </FieldSet>} */\r\n                            right={<Button onClick={() => onShowForm()}>Agrupar</Button>}\r\n                        />\r\n                    </FieldSet>\r\n\r\n                    <FieldSet margin={false}>\r\n                        {aggId &&\r\n                            /*                             <Form.List name=\"agg\" initialValue={aggId}>\r\n                                                            {(fields, { add, remove, move }) => {\r\n                                                                return ( */\r\n                            <List\r\n                                style={{ width: \"100%\" }}\r\n                                grid={{\r\n                                    gutter: 16,\r\n                                    xs: 1,\r\n                                    sm: 1,\r\n                                    md: 2,\r\n                                    lg: 2,\r\n                                    xl: 2,\r\n                                    xxl: 2,\r\n                                }}\r\n                                size=\"small\"\r\n                                dataSource={aggId}\r\n                                renderItem={aggItem => {\r\n                                    return (<CardAgg aggItem={aggItem} /* aggItem={aggId[item.name]} */ of_id={ctx.of_id} setShowForm={setShowForm} />);\r\n                                }}\r\n                            >\r\n                            </List>\r\n                            /*                                     )\r\n                                                            }}\r\n                                                        </Form.List> */\r\n                        }\r\n                    </FieldSet>\r\n\r\n\r\n\r\n                </FormLayout>\r\n            </Spin>\r\n        </>\r\n    );\r\n}"],"names":["schema","keys","excludeKeys","getSchema","unknown","loadAggsLookup","produto_id","agg_id","fetchPost","url","API_URL","filter","status","parameters","group","sort","rows","data","id","setFormTitle","parentRef","closeParent","parentReload","wrapForm","forInput","ctx","useContext","OFabricoContext","form","Form","useState","setLoading","submitting","setSubmitting","setChangedValues","error","warning","info","success","formStatus","guides","key","values","operation","resultMessage","setResultMessage","init","of_cod","produto_cod","aggsLookup","title","aggs","v","agg_ofid_original","map","checked","tempof_id","of_id","artigo_cod","item_cod","cliente_nome","iorder","item_nome","enabled","setFieldsValue","useEffect","onFinish","response","onClose","onSubmit","useCallback","submit","result","successButtonOK","type","onClick","resetFields","successButtonClose","errorButtonOK","errorButtonClose","name","onValuesChange","changedValues","component","layout","style","width","padding","field","wide","margin","overflow","label","pos","wrap","colon","ellipsis","alert","tooltip","container","top","right","center","bottom","left","required","alignSelf","fieldSet","fields","index","border","borderRadius","disabled","getFieldValue","forViewBorder","fontWeight","size","elId","current","Panel","Collapse","FormPaletesStockUpsert","React","FormPaletizacao","FormSettings","FormAttachments","StyledCard","styled","Card","StyledCollapse","Drawer","showWrapper","setShowWrapper","formTitle","iref","useRef","record","onVisible","prev","show","subTitle","mode","destroyOnClose","mask","setVisible","visible","bodyStyle","height","footer","ref","textAlign","YScroll","FormAggUpsert","Suspense","fallback","token","cancelToken","PaletesStock","item","display","flexWrap","flexDirection","paletesstock","idx","flex","CardAgg","aggItem","setShowForm","paletes","JSON","parse","n_paletes","onAction","op","hoverable","headStyle","backgroundColor","color","fontSize","actions","PaperClipOutlined","defaultActiveKey","expandIconPosition","bordered","header","justifyContent","qty_encomenda","linear_meters","toFixed","sqm_bobine","items","total","sqm_contentor","borderBottom","num_bobines","sqm_palete","length","SvgSchema","overflowY","loading","showForm","setAggs","aggId","setAggId","cancelFetch","loadData","cancel","_aggs","spinning","indicator","LoadingOutlined","spin","tip","align","vAlign","addons","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem"],"sourceRoot":""}